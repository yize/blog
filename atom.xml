<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yize&#39;s Notes</title>
  <subtitle>Quick notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ithans.com/"/>
  <updated>2018-01-15T17:43:28.394Z</updated>
  <id>http://ithans.com/</id>
  
  <author>
    <name>伊泽</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>xswitch</title>
    <link href="http://ithans.com/2018/xswitch/"/>
    <id>http://ithans.com/2018/xswitch/</id>
    <published>2018-01-15T17:41:40.000Z</published>
    <updated>2018-01-15T17:43:28.394Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://travis-ci.org/yize/xswitch" target="_blank" rel="external"><img src="https://travis-ci.org/yize/xswitch.svg?branch=master" alt="Build Status"></a></p>
<h2 id="解决的痛点"><a href="#解决的痛点" class="headerlink" title="解决的痛点"></a>解决的痛点</h2><ul>
<li>在开发和调试过程中，经常需要把线上或者日常环境的 CSS、JS 转发到本地，Charles 等本地代理工具，特别是在全网 HTTPS 化后，变得更加复杂和繁琐。</li>
<li>现有的 Chrome 插件，交互形式，对程序员不是很友好，无法解决快速定位到某一条规则、快速开关组的需求。</li>
<li><a href="https://github.com/alibaba/anyproxy" target="_blank" rel="external">anyproxy</a> 是不错的工具，但是在浏览器转发上，配置起来相对麻烦。</li>
</ul>
<h2 id="XSwitch-的优势"><a href="#XSwitch-的优势" class="headerlink" title="XSwitch 的优势"></a>XSwitch 的优势</h2><ul>
<li>基于 Chrome Extension，即装即用。不需要额外配置其他环境。</li>
<li>基于 <a href="https://github.com/Microsoft/monaco-editor" target="_blank" rel="external">Monaco Editor</a>，可以使用编辑器带来的快捷操作方式。</li>
<li>可以写 JSON 注释。</li>
<li>即时保存，即时生效。</li>
<li>自动提示页面上加载到的资源文件，作为提醒（目前只抓取了 http(s) 的地址，其他协议的忽略了）</li>
<li><a href="https://github.com/yize/xswitch" target="_blank" rel="external">Open Source</a></li>
</ul>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>如果设定了如下规则：</p>
<p><img src="https://img.alicdn.com/tfs/TB1roVJmRfH8KJjy1XbXXbLdXXa-1672-944.png" alt=""></p>
<p>访问：<a href="https://g.alicdn.com/platform/daily-test/isDaily.js" target="_blank" rel="external">https://g.alicdn.com/platform/daily-test/isDaily.js</a></p>
<p>会进行如下转发：</p>
<p><img src="https://img.alicdn.com/tfs/TB1HH6emLDH8KJjy1XcXXcpdXXa-3048-1922.png" alt=""></p>
<h3 id="支持自动提示"><a href="#支持自动提示" class="headerlink" title="支持自动提示"></a>支持自动提示</h3><p><img src="https://img.alicdn.com/tfs/TB1vLPBmH_I8KJjy1XaXXbsxpXa-1672-944.png" alt=""></p>
<p><img src="https://img.alicdn.com/tfs/TB1oRfdmLDH8KJjy1XcXXcpdXXa-1672-944.png" alt=""></p>
<h3 id="支持正则匹配"><a href="#支持正则匹配" class="headerlink" title="支持正则匹配"></a>支持正则匹配</h3><p><a href="https://github.com/yize/xswitch/blob/master/test/index.spec.js" target="_blank" rel="external">https://github.com/yize/xswitch/blob/master/test/index.spec.js</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  // proxyRules</div><div class="line">  "proxy": [</div><div class="line">    [</div><div class="line">      "//g.alicdn.com/platform/daily-test/(.*).js$",</div><div class="line">      "//g.alicdn.com/platform/daily-test/$1.json"</div><div class="line">    ],</div><div class="line">    ["g.alicdn.com", "alinw.alicdn.com"]</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Logo"><a href="#Logo" class="headerlink" title="Logo"></a>Logo</h2><blockquote>
<p>像是程序员的发际线</p>
</blockquote>
<p><img src="https://img.alicdn.com/tfs/TB1JIIzmvDH8KJjy1XcXXcpdXXa-1918-832.png" alt=""></p>
<p>希望 XSwitch 能够给大家带来帮助或者想法。</p>
<p>欢迎<a href="https://chrome.google.com/webstore/detail/idkjhjggpffolpidfkikidcokdkdaogg" target="_blank" rel="external">试用</a>，欢迎<a href="https://github.com/yize/xswitch/issues" target="_blank" rel="external">提意见</a>。</p>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul>
<li><a href="https://chrome.google.com/webstore/detail/idkjhjggpffolpidfkikidcokdkdaogg" target="_blank" rel="external">前往 Chrome Web Store 下载</a></li>
<li><a href="https://github.com/yize/xswitch" target="_blank" rel="external">XSwitch - Github</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://travis-ci.org/yize/xswitch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://travis-ci.org/yize/xswitch.svg?branch=maste
    
    </summary>
    
    
      <category term="xswitch" scheme="http://ithans.com/tags/xswitch/"/>
    
      <category term="Chrome Extension" scheme="http://ithans.com/tags/Chrome-Extension/"/>
    
      <category term="Proxy" scheme="http://ithans.com/tags/Proxy/"/>
    
      <category term="Forwading" scheme="http://ithans.com/tags/Forwading/"/>
    
  </entry>
  
  <entry>
    <title>如何在 nginx 下启动 http2</title>
    <link href="http://ithans.com/2017/how-to-enable-http2-when-use-nginx/"/>
    <id>http://ithans.com/2017/how-to-enable-http2-when-use-nginx/</id>
    <published>2017-03-30T10:21:56.000Z</published>
    <updated>2017-03-30T10:24:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何在-nginx-下启动-http2"><a href="#如何在-nginx-下启动-http2" class="headerlink" title="如何在 nginx 下启动 http2"></a>如何在 nginx 下启动 http2</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen 443 ssl http2 default_server;</div><div class="line"></div><div class="line">        server_name ithans.com;</div></pre></td></tr></table></figure>
<p>links: <a href="https://yq.aliyun.com/articles/7171" target="_blank" rel="external">https://yq.aliyun.com/articles/7171</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何在-nginx-下启动-http2&quot;&gt;&lt;a href=&quot;#如何在-nginx-下启动-http2&quot; class=&quot;headerlink&quot; title=&quot;如何在 nginx 下启动 http2&quot;&gt;&lt;/a&gt;如何在 nginx 下启动 http2&lt;/h1&gt;&lt;figu
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>rsync 如何同步到 root 的目录下？</title>
    <link href="http://ithans.com/2017/rsync/"/>
    <id>http://ithans.com/2017/rsync/</id>
    <published>2017-03-30T10:18:34.000Z</published>
    <updated>2017-03-30T10:23:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rsync-如何同步到-root-账户下？"><a href="#rsync-如何同步到-root-账户下？" class="headerlink" title="rsync 如何同步到 root 账户下？"></a>rsync 如何同步到 root 账户下？</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rsync -chavzP --rsync-path=<span class="string">"sudo rsync"</span> --stats user@192.168.1.2:/ .</div></pre></td></tr></table></figure>
<p>使用 <code>--rsync-path=&quot;sudo rsync&quot;</code></p>
<p>links： <a href="http://unix.stackexchange.com/questions/92123/rsync-all-files-of-remote-machine-over-ssh-without-root-user/92125#92125" target="_blank" rel="external">http://unix.stackexchange.com/questions/92123/rsync-all-files-of-remote-machine-over-ssh-without-root-user/92125#92125</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;rsync-如何同步到-root-账户下？&quot;&gt;&lt;a href=&quot;#rsync-如何同步到-root-账户下？&quot; class=&quot;headerlink&quot; title=&quot;rsync 如何同步到 root 账户下？&quot;&gt;&lt;/a&gt;rsync 如何同步到 root 账户下？&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo-from-octopress</title>
    <link href="http://ithans.com/2016/hexo-from-octopress/"/>
    <id>http://ithans.com/2016/hexo-from-octopress/</id>
    <published>2016-02-20T11:13:48.000Z</published>
    <updated>2016-05-15T12:53:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-建站"><a href="#hexo-建站" class="headerlink" title="hexo 建站"></a>hexo 建站</h1><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><blockquote>
<p>hasNode &amp;&amp; skipThis;</p>
</blockquote>
<p>Linux install node , <a href="https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions" target="_blank" rel="external">nodejs docs</a>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="_">-s</span>L https://deb.nodesource.com/setup_4.x | sudo -E bash -</div><div class="line">$ sudo apt-get install -y nodejs</div></pre></td></tr></table></figure>
<h3 id="install-hexo-cli"><a href="#install-hexo-cli" class="headerlink" title="install hexo-cli"></a>install hexo-cli</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="初始化-hexo"><a href="#初始化-hexo" class="headerlink" title="初始化 hexo"></a>初始化 hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init blog</div><div class="line">$ <span class="built_in">cd</span> blog</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<h3 id="install-NexT-主题"><a href="#install-NexT-主题" class="headerlink" title="install NexT 主题"></a>install NexT 主题</h3><p><a href="https://www.zhihu.com/question/24422335/answer/46357100" target="_blank" rel="external">知乎</a>上看到这个主题，还不错。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> your-hexo-site</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next next</div></pre></td></tr></table></figure>
<p>see <a href="http://theme-next.iissnan.com/five-minutes-setup.html" target="_blank" rel="external">theme-NexT-five-minutes-setup.html</a></p>
<a id="more"></a>
<h3 id="从-Octopress-迁移到-Hexo"><a href="#从-Octopress-迁移到-Hexo" class="headerlink" title="从 Octopress 迁移到 Hexo"></a>从 Octopress 迁移到 Hexo</h3><p>把 Octopress <code>source/_posts</code> 文件夹内的所有文件转移到 Hexo 的 <code>source/_posts</code> 文件夹，并修改 _config.yml 中的 new_post_name 参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new_post_name: :year-:month-:day-:title.md</div></pre></td></tr></table></figure>
<h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><h3 id="阅读全文语法"><a href="#阅读全文语法" class="headerlink" title="阅读全文语法"></a>阅读全文语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--more--&gt;</span></div></pre></td></tr></table></figure>
<h3 id="同步到-github"><a href="#同步到-github" class="headerlink" title="同步到 github"></a>同步到 github</h3><p>在 Github 上新建项目，在 blog 文件下配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git init</div><div class="line">$ git remote add origin git@github.com:yize/blog.git</div></pre></td></tr></table></figure>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>启动模式有几种：</p>
<ol>
<li><p>只使用 <code>hexo</code> 启动</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker pull wzpan/hexo:v3</div><div class="line">$ docker run --rm -p 80:4000 -v YOUR_LOCAL_BLOG_DIR:/root/blog wzpan/hexo:v3</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>这样可以直接占用 `80` 端口。
</code></pre><ol>
<li><p>Use nginx-proxy （推荐）</p>
<p> 通过 <a href="https://hub.docker.com/r/jwilder/nginx-proxy/" target="_blank" rel="external">nginx-proxy</a> 让我们的反向代理变的更加简单：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run <span class="_">-d</span> -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run <span class="_">-e</span> VIRTUAL_HOST=www.ithans.com --rm -v YOUR_LOCAL_BLOG_DIR:/root/blog wzpan/hexo:v3</div></pre></td></tr></table></figure>


nginx-proxy 会自动寻找容器的 Port ，然后做好 nginx 的 proxy：大概的实现是：

1. 通过 Docker API 获取 containers 的 `IP`、`Port` 以及其他配置项

    手动查询方法：

    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker ps <span class="comment">#查询启动的容器</span></div><div class="line">$ docker inspect YOUR_CONTAINER_ID <span class="comment">#查询容器信息（包括 IP）</span></div></pre></td></tr></table></figure>


2. 通过 [docker-gen](https://github.com/jwilder/docker-gen) 生成 Nginx config：

    <figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">upstream</span> www.ithans.com &#123;</div><div class="line">    <span class="attribute">server</span> <span class="number">172.17.0.1:4000</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="comment">#ssl_certificate /etc/nginx/certs/demo.pem;</span></div><div class="line">    <span class="comment">#ssl_certificate_key /etc/nginx/certs/demo.key;</span></div><div class="line"></div><div class="line">    <span class="attribute">gzip_types</span> text/plain text/css application/json application/x-javascript</div><div class="line">               text/xml application/xml application/xml+rss text/javascript;</div><div class="line"></div><div class="line">    <span class="attribute">server_name</span> www.ithans.com;</div><div class="line"></div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">proxy_pass</span> http://www.ithans.com;</div><div class="line">        <span class="attribute">include</span> /etc/nginx/proxy_params;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="section">upstream</span>  &#123;</div><div class="line">    <span class="attribute">server</span> <span class="number">172.17.0.1:4000</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="comment">#ssl_certificate /etc/nginx/certs/demo.pem;</span></div><div class="line">    <span class="comment">#ssl_certificate_key /etc/nginx/certs/demo.key;</span></div><div class="line"></div><div class="line">    <span class="attribute">gzip_types</span> text/plain text/css application/json application/x-javascript</div><div class="line">               text/xml application/xml application/xml+rss text/javascript;</div><div class="line"></div><div class="line">    <span class="attribute">server_name</span> www.ithans.com;</div><div class="line"></div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">proxy_pass</span> http://www.ithans.com;</div><div class="line">        <span class="attribute">include</span> /etc/nginx/proxy_params;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>


3. 直接通过 `hexo server` 启动
</code></pre><h2 id="links"><a href="#links" class="headerlink" title="links"></a>links</h2><ul>
<li><a href="https://hexo.io" target="_blank" rel="external">hexo</a></li>
<li><a href="https://hub.docker.com/r/jwilder/nginx-proxy/" target="_blank" rel="external">docker nginx-proxy</a></li>
<li><a href="https://hub.docker.com/r/wzpan/hexo/" target="_blank" rel="external">docker wzpan/hexo</a></li>
<li><a href="https://blog.jamespan.me/2015/04/17/hexo-in-the-docker/" target="_blank" rel="external">hexo-in-the-docker</a></li>
<li><a href="http://jasonwilder.com/blog/2014/03/25/automated-nginx-reverse-proxy-for-docker/" target="_blank" rel="external">automated-nginx-reverse-proxy-for-docker</a></li>
<li><a href="http://theme-next.iissnan.com/five-minutes-setup.html" target="_blank" rel="external">hexo-NexT setup</a></li>
<li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">http://ibruce.info/2013/11/22/hexo-your-blog/</a></li>
</ul>
<p>I</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hexo-建站&quot;&gt;&lt;a href=&quot;#hexo-建站&quot; class=&quot;headerlink&quot; title=&quot;hexo 建站&quot;&gt;&lt;/a&gt;hexo 建站&lt;/h1&gt;&lt;h2 id=&quot;安装：&quot;&gt;&lt;a href=&quot;#安装：&quot; class=&quot;headerlink&quot; title=&quot;安装：&quot;&gt;&lt;/a&gt;安装：&lt;/h2&gt;&lt;h3 id=&quot;node&quot;&gt;&lt;a href=&quot;#node&quot; class=&quot;headerlink&quot; title=&quot;node&quot;&gt;&lt;/a&gt;node&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;hasNode &amp;amp;&amp;amp; skipThis;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Linux install node , &lt;a href=&quot;https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions&quot;&gt;nodejs docs&lt;/a&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ curl &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt;L https://deb.nodesource.com/setup_4.x | sudo -E bash -&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install -y nodejs&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;install-hexo-cli&quot;&gt;&lt;a href=&quot;#install-hexo-cli&quot; class=&quot;headerlink&quot; title=&quot;install hexo-cli&quot;&gt;&lt;/a&gt;install hexo-cli&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install -g hexo-cli&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;h3 id=&quot;初始化-hexo&quot;&gt;&lt;a href=&quot;#初始化-hexo&quot; class=&quot;headerlink&quot; title=&quot;初始化 hexo&quot;&gt;&lt;/a&gt;初始化 hexo&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo init blog&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; blog&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;install-NexT-主题&quot;&gt;&lt;a href=&quot;#install-NexT-主题&quot; class=&quot;headerlink&quot; title=&quot;install NexT 主题&quot;&gt;&lt;/a&gt;install NexT 主题&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/24422335/answer/46357100&quot;&gt;知乎&lt;/a&gt;上看到这个主题，还不错。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; your-hexo-site&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/iissnan/hexo-theme-next next&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;see &lt;a href=&quot;http://theme-next.iissnan.com/five-minutes-setup.html&quot;&gt;theme-NexT-five-minutes-setup.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Stack" scheme="http://ithans.com/categories/Stack/"/>
    
    
      <category term="Hexo" scheme="http://ithans.com/tags/Hexo/"/>
    
      <category term="Octopress" scheme="http://ithans.com/tags/Octopress/"/>
    
      <category term="Docker" scheme="http://ithans.com/tags/Docker/"/>
    
      <category term="Nginx" scheme="http://ithans.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Study React</title>
    <link href="http://ithans.com/2015/study-react/"/>
    <id>http://ithans.com/2015/study-react/</id>
    <published>2015-09-20T16:00:00.000Z</published>
    <updated>2016-02-20T11:00:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-学习笔记"><a href="#React-学习笔记" class="headerlink" title="React 学习笔记"></a>React 学习笔记</h1><blockquote>
<p>A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES</p>
</blockquote>
<p>引言是 <a href="http://facebook.github.io/react/" target="_blank" rel="external">React 官网</a> 上是的自述。React 主要是用于构建用户界面。</p>
<h2 id="为什么使用-React"><a href="#为什么使用-React" class="headerlink" title="为什么使用 React?"></a>为什么使用 React?</h2><p>React 是一个 Facebook 和 Instagram 用来创建用户界面的 JavaScript 库。主要采用以下两个思想：</p>
<ul>
<li><p>简单</p>
<p>  仅仅只要表达出你的应用程序在任一个时间点应该长的样子，然后当底层的数据变了，React 会自动处理所有用户界面的更新。</p>
</li>
<li><p>声明式</p>
<p>   数据变化后，React 概念上与点击“刷新”按钮类似，但仅会更新变化的部分。</p>
</li>
</ul>
<a id="more"></a>
<h2 id="几个特点"><a href="#几个特点" class="headerlink" title="几个特点"></a>几个特点</h2><ul>
<li><p>仅仅是 UI</p>
<p>  许多人使用 React 作为 MVC 架构的 V 层。尽管 React 并没有假设过你的其他技术栈，但你仍可以作为一个小特征轻易地在已有项目中使用。</p>
</li>
<li><p>虚拟 DOM</p>
<p>  React为了更高超的性能而使用虚拟DOM作为其不同的实现。 它同时也可以由服务端Node.js渲染 － 而不需要过重的浏览器DOM支持。</p>
</li>
<li><p>数据流</p>
<p>  React实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</p>
</li>
</ul>
<h2 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h2><ul>
<li><p>React elements</p>
<p> <code>React 元素（React elements）</code> 是一些用于表示 HTML 元素的 JavaScript 对象，他们并不存在于浏览器中，浏览器原生对象在 React 中，也有对应的 React 元素对应，比如 <code>h1</code> 、 <code>div</code> 、<code>section</code>。</p>
</li>
</ul>
<ul>
<li><p>Components</p>
<p>  <code>组件（Components）</code>也就是我们常说的组件，他们一般是构成我们页面的最大的一部分，主要包括「结构」和「功能」。举个例子，比如 <code>NavBar</code> 、 <code>LikeButton</code> 、<code>ImageUploader</code> 都是一个个带有结构和功能的组件。</p>
<p>  组件就像是函数。接受<code>props</code>和<code>state</code>作为参数，渲染出<code>HTML</code>。</p>
</li>
<li><p>JSX</p>
<p>  <code>JSX</code> 是一个看起来像 XML 的 JavaScript 语法扩展。举个例子：<code>&lt;h1&gt;Hello&lt;/h1&gt;</code> 是 <code>React Element</code> 使用 <code>JSX</code> 的语法的写法。同样的，如果你不用 <code>JSX</code> ，使用这样的写法：<code>React.DOM.h1(null, &#39;Hello&#39;)</code> 也可以达到相同的效果。相比之下 <code>JSX</code> 的易读性更好。 JSX 需要编译之后才能在浏览器中运行。<code>JSX</code> 并不是强制使用的，这个语法只是让搭建 React 应用变得更加地简单。</p>
<p>  所有的标签都必须闭合，可以是自闭合也可以是常规闭合。<code>&lt;div/&gt;</code> 和 <code>&lt;div&gt;&lt;/div&gt;</code> 是等价的。</p>
</li>
</ul>
<ul>
<li><p>The Virtual DOM</p>
<p>  <code>虚拟 DOM（The Virtual DOM）</code>  是存在于内存之中的一种数据结构，并不是真正的 DOM 节点。只有当他插入到文档中以后，才会变成真正的 DOM 。React 会监听虚拟 DOM 的变化，会自动的计算 DOM 和 虚拟 DOM 的区别。所有 DOM 的变动，都会先在 虚拟 DOM 上发生，然后再将实际变动的部分，反应在真实的 DOM 上，这种算法叫 DOM diff ，它极大的提高了网页性能表现。</p>
</li>
</ul>
<p>需要先稍微理解下以上的几个概念，方便接下来的理解。</p>
<h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><p>我们首先来看下怎么把 虚拟 DOM （React 元素和组件都是虚拟 DOM）渲染到页面上。虚拟 DOM 只存在于内存中，我们需要告诉 React 生成的 DOM 应该渲染到何处。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">React.render(<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'App'</span>));</div></pre></td></tr></table></figure>
<p><a href="http://jsbin.com/herina/edit?html,js,output" target="_blank" rel="external">View JSBin</a></p>
<p>上面的代码会将一个 H1 ，插入到 body 上。</p>
<p><code>render</code> 函数接收两个参数，第一个参数为 <code>React element</code>，第二个参数为 <code>DOM element</code>。</p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>组件是 React 的重要组成部分，是自定义的 React 元素。一个组件就是一个功能模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Hello = React.createClass(&#123;</div><div class="line">	<span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>)</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">React.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'App'</span>));</div></pre></td></tr></table></figure>
<p><a href="http://jsbin.com/hitalak/edit?html,js,output" target="_blank" rel="external">View JSBin</a></p>
<p>通过 React.createClass 方法创建组件类，每个组件类方法必须提供 <code>render</code> 函数。<code>render</code> 函数返回虚拟 DOM 结构树标示串。</p>
<p>在上段代码中，通过 <code>createClass</code> 我们创建了 <code>HelloWorld</code> 元素，然后我们通过 <code>React.render</code> 方法告诉 React 需要将 <code>HelloWorld</code> 元素渲染到 <code>#app</code> 里面。</p>
<p>这个例子和上一个差不多，区别是你可以为 <code>HelloWorld</code> 元素添加更多的自定义方法和逻辑了。</p>
<blockquote>
<p>注意 自定义的 React 元素，第一个字母需要大写，用来和传统的 HTML 元素进行区分。</p>
</blockquote>
<h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><p><code>Props</code> 我们可以理解为组件的参数。通过 <code>HTML</code> 的属性传入。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Hello = React.createClass(&#123;</div><div class="line">	<span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>)</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">React.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">'World'</span>/&gt;</span>, document.getElementById('App'));</span></div></pre></td></tr></table></figure>
<p><a href="http://jsbin.com/rudipo/edit?html,js,output" target="_blank" rel="external">View JSBin</a></p>
<p>在 <code>React.render</code> 方法中，我们传入了 <code>name</code> 这个参数。这个参数在 <code>Hello</code> 组件的 <code>render</code> 通过 <code>this.props.name</code> 取得。</p>
<p>所有通过 <code>ReactElement</code> 传入的参数，都可以在组件的 <code>render</code> 方法中获取到。值得注意的是，<code>ReactElement</code> 是通过 <code>JavaScript</code> 创建的，<code>class</code> <code>for</code> 等均为 <code>JavaScript</code> 的保留字，在 <code>JSX</code> 中不能直接写 <code>class</code> 和 <code>for</code>，而需要写成 <code>className</code> 和 <code>htmlFor</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">React.render(<span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"inputEl"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">className</span>=<span class="string">"input-el"</span> <span class="attr">id</span>=<span class="string">"inputEl"</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span>,document.getElementById("App"))</span></div></pre></td></tr></table></figure>
<h3 id="行内样式的写法"><a href="#行内样式的写法" class="headerlink" title="行内样式的写法"></a>行内样式的写法</h3><p>行内样式的写法，跟 HTML 的区别比较大，以对象的形式传入。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Hello = React.createClass(&#123;</div><div class="line">	<span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>'<span class="attr">red</span>'&#125;&#125;&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>)</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">React.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">'World'</span>/&gt;</span>, document.getElementById('App'));</span></div></pre></td></tr></table></figure>
<p><a href="http://jsbin.com/riyayo/edit?html,js,output" target="_blank" rel="external">View JSBIN</a></p>
<p>style 不能写成 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">style=<span class="string">"color:red"</span></div></pre></td></tr></table></figure>
<p>而应该写成</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">style=&#123;&#123;<span class="attr">color</span>:<span class="string">'red'</span>&#125;&#125;</div></pre></td></tr></table></figure>
<h3 id="this-props-children"><a href="#this-props-children" class="headerlink" title="this.props.children"></a>this.props.children</h3><p>this.props 对象的属性和组件的属性一一对应，但是有一个是例外的， 就是 <code>this.props.children</code> 。它表示的是组件的所有子节点。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> List = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line">      &#123;</div><div class="line">        this.props.children.map(function (child) &#123;</div><div class="line">          return (<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">React.render(<span class="xml"><span class="tag">&lt;<span class="name">List</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>World<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">List</span>&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">'App'</span>))</div></pre></td></tr></table></figure>
<p><a href="http://jsbin.com/xeliho/edit?html,js,output" target="_blank" rel="external">View JSBin</a></p>
<blockquote>
<p>注意：你没有办法通过 <code>this.props.children</code> 取得当前组件的子元素，因为 <code>this.props.children</code> 返回的是组件传递给你的 <code>Passed onto you</code> 子节点。</p>
</blockquote>
<p>值得一提是，<code>this.props.children</code> 的返回类型，跟子元素的个数有关。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0 undefined</div><div class="line">1 React Element</div><div class="line">2+ Array of React Element</div></pre></td></tr></table></figure>
<p>如果你确定长度大于等于2，你可以直接通过 this.props.children.map 方法，否则就会报错。</p>
<p>React 提供了 React.Children ，用来帮我们处理这样的 case 。</p>
<p>上面的代码可以直接把  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="keyword">this</span>.props.children.map(<span class="function"><span class="keyword">function</span> (<span class="params">child</span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>)</div><div class="line">   &#125;)</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>替换为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   React.Children.map(<span class="keyword">this</span>.props.children, <span class="function"><span class="keyword">function</span> (<span class="params">child</span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>)</div><div class="line">   &#125;)</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>这样的话，就不会有问题了。</p>
<p>具体的可以去看下 <a href="https://facebook.github.io/react/docs/top-level-api.html#react.children" target="_blank" rel="external">React.Children - React 官方文档</a></p>
<h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>State 是组件的内部状态对象，state 仅用于实现交互功能，数据会随着时间变化。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> SayHello = React.createClass(&#123;</div><div class="line">	<span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> &#123;</div><div class="line">			<span class="attr">value</span>: <span class="string">"World"</span></div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">handleChange</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			<span class="attr">value</span>:e.target.value</div><div class="line">		&#125;)</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> (</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;this.state.value&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">React.render(<span class="tag">&lt;<span class="name">SayHello</span>/&gt;</span>, document.getElementById('App'))</div></pre></td></tr></table></figure>
<p><a href="http://jsbin.com/xefore/edit?html,js,output" target="_blank" rel="external">View JSBin</a></p>
<blockquote>
<p>Components are Just State Machines</p>
</blockquote>
<p>React 认为组件仅仅是状态机这么简单，在 React 中，你只需要管理组件的状态[state]来更新 UI 的展现，然后根据新的状态来渲染出新的 UI。根据新的状态更新 DOM 这件事情，React 替我们做了，而且做的很好。我们只需要享受编码的乐趣就行了。</p>
<p><code>setState(data, callback)</code> 是 React 用来设置状态的方法，第一个参数是个对象，里面需要传入你想要更改的键值对；第二个参数是可选的，组件重新渲染之后会触发这个函数，这个参数大部分时候是用不上的，React 会帮你处理 setState 之后的逻辑。</p>
<p><code>getInitialState</code> 在组件初始化到时候，会调用这个方法，用以获取默认的 State 值，这个函数返回一个对象。</p>
<p><code>handleChange</code> 是我们自己实现的方法，用来触发 <code>setState</code> 方法，<code>onChange={this.handleChange}</code> 我们在 input 的 onChange 时，触发了 <code>handleChange</code> 方法，在 handleChange 中调用 setState 方法改变了 this.state.value 的值，这个时候会触发 render 方法。注意：调用 setState 方法都会触发 render 方法，生成虚拟 DOM ，然后 React 会进行 DC（Dirty Check），从而决定是否要将虚拟 DOM 反映到页面上。</p>
<h2 id="Props-vs-State"><a href="#Props-vs-State" class="headerlink" title="Props vs. State"></a>Props vs. State</h2><p>这两者是有关系的，一个组件的 state 可能会成为另外一个组件的 props 。 state 通过 render 方法传给另外一个组件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;ChildComponent value=&#123;<span class="keyword">this</span>.state.value&#125;/&gt;</div></pre></td></tr></table></figure>
<p>我们暂且称这个组件为子组件，它的父级组件为父组件。父组件的 state.value 变成了子组件的 <code>this.props.value</code> ，对于子组件来说，props.value 是不允许被更改的。如果需要更改，需要父组件通过改变其自身的 state 来改变：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>:<span class="string">'New Value'</span>&#125;);</div></pre></td></tr></table></figure>
<p>React 会将值传递给子组件。这个时候，我们可能会问：如果子元素想要改变自己的这个 prop ？一般情况下，都是通过父组件监听子组件的事件来完成：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;ChildComponent value=&#123;<span class="keyword">this</span>.state.value&#125; onChange=&#123;<span class="keyword">this</span>.handleValueChange&#125;/&gt;</div></pre></td></tr></table></figure>
<p>父组件中的 handleValueChange 方法大概是这样的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">handleValueChange: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.setState(&#123; <span class="attr">value</span>: newValue&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大部分组件自身都不需要有 state ，除非内部需要维护组件自身的状态。</p>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>入门 React 时，难以习惯的是 input、textarea 等元素的输入了，用户在填写表单的值的时候，属于用户跟组件的互动。input 的值变化需要在 onChange 等事件抛出，通过 value 传递给 input ，从而改变输入值，React 会自动渲染组件，并且把光标定位到它应该在的位置。</p>
<p>如果仅仅是如下这样的代码，效果跟我们想象的可能不太一样，不管我们怎么输入，就是不会有效果。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"hello"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://jsbin.com/durogu/edit?html,js,output" target="_blank" rel="external">View JSBin</a></p>
<p>细心的你可能会发现，如果你把光标移动到除了 o 之外的位置，输入以后，会回到 o 的后面。但是值不会发生改变。</p>
<p>对 React 来说，如果我们赋予了表单元素（input、textarea、option等） value 值，却没有 onChange 方法去处理事件，React 会把这个表单元素渲染为只读元素，如果需要编辑功能，你应该用 defaultValue 替代。 要么设置 onChange 要么推荐直接写 readonly 好了。更多 Form 组件和原生组件的区别可以看<a href="https://facebook.github.io/react/docs/forms.html" target="_blank" rel="external">这里</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--1. onChange--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"hello"</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--2. defaultValue--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">defalutValue</span>=<span class="string">"hello"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!--3. readOnly--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"hello"</span> <span class="attr">readOnly</span>/&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>value ， <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 支持</li>
<li>checked， <code>&lt;input&gt;</code> type 为 <code>checkbox</code> 和 <code>radio</code> 的支持</li>
<li>selected， <code>&lt;option&gt;</code> 支持</li>
</ul>
<p>在 HTML 中，textarea 是通过他的 children 赋值的，但是在 React 中则是通过 value。</p>
<p>Form 组件允许通过 <code>onChange</code> 回调来监听值的变化， onChange 会在以下几种情况下都会触发：</p>
<ul>
<li><code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 的 value 发生改变</li>
<li><code>&lt;input&gt;</code> 的 checked 值发生改变</li>
<li><code>&lt;option&gt;</code> 的 selected 值发生改变</li>
</ul>
<p>和所有 DOM 事件一样，所有的 HTML 原生组件都支持 onChange 属性，而且可以用来监听冒泡的 change 事件。React 也提供了捕获事件，在冒泡事件名后加上 <code>Capture</code> 就可以监听捕获事件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">onChange 监听冒泡阶段的 change 事件</div><div class="line">onChangeCapture 监听捕获阶段的 change 事件</div></pre></td></tr></table></figure>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>React 和 jQuery 一样，标准化了事件，也封装了事件对象，使得在浏览器中不存在兼容性问题。如果你想要直接使用底层的浏览器事件对象，也可以直接通过 <code>nativeEvent</code> 访问。</p>
<p>参考：<a href="http://facebook.github.io/react/docs/events.html#supported-events" target="_blank" rel="external">React events - supported-events</a></p>
<h2 id="FindDOMNode"><a href="#FindDOMNode" class="headerlink" title="FindDOMNode()"></a>FindDOMNode()</h2><p>React Element 都不是真实的 DOM 对象，而是虚拟 DOM（Virtual DOM）。React 提供了 <code>React.findDOMNode</code> 的方法来取到组件的真实 DOM。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> SayHello = React.createClass(&#123;</div><div class="line">	<span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> &#123;</div><div class="line">			<span class="attr">value</span>: <span class="string">"World"</span></div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">componentDidMount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> headRef = <span class="keyword">this</span>.refs.head;</div><div class="line">		<span class="keyword">var</span> headEl = React.findDOMNode(headRef);<span class="comment">// 等价于 headRef.getDOMNode()</span></div><div class="line">		headEl.style.color = <span class="string">'red'</span>;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">handleChange</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			<span class="attr">value</span>:e.target.value</div><div class="line">		&#125;)</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> (</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">"head"</span>&gt;</span>Hello &#123;this.state.value&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">React.render(<span class="tag">&lt;<span class="name">SayHello</span>/&gt;</span>, document.getElementById('App'))</div></pre></td></tr></table></figure>
<p><a href="http://jsbin.com/sivivi/edit?html,js,output" target="_blank" rel="external">View JSBIN</a></p>
<blockquote>
<p>注意，我们必须在组件挂载到页面之后才能获取到它对应的真实 DOM 元素，我们不能在组件 Mount 之前获取到 DOM 元素。</p>
</blockquote>
<h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><p>我们可以从几个方面来理解 React 组件的生命周期。</p>
<ol>
<li>初始化，也就是挂载（Mount）时，发生了什么？</li>
<li>更新， 组件挂载之后，props 或者 state 更新时，发生了什么？</li>
<li>移除，组件从 DOM 中移除时，发生了什么？</li>
</ol>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><img src="https://img.alicdn.com/tps/TB1Jme3JVXXXXXcXpXXXXXXXXXX-1032-408.png" alt="React-initial"></p>
<p>在组件初始化时，会调用一次 <code>getDefaultProps</code> 和 <code>getInitialState</code> 。</p>
<p><code>getDefaultProps</code> 方法用来设置默认 props</p>
<p><code>getInitialState</code> 方法用来设置 state 的初始值</p>
<p>在 <code>render</code> 之前，会触发 <code>componentWillMount</code></p>
<p>注意下，在这个方法中调用 setState 不会触发组件的第二次渲染。</p>
<p>在 <code>render</code> 之后，会触发 <code>componentDidMount</code></p>
<p>此时，我们已经可以取到真实的 DOM 节点，可以进行 DOM 操作了。</p>
<p>我们也可以在此时做数据请求。比如 ajax</p>
<p><code>render</code> 方法会返回组件需要的标记，React 会根据标记生成虚拟 DOM。</p>
<h3 id="改变-props"><a href="#改变-props" class="headerlink" title="改变 props"></a>改变 props</h3><p>props 发生改变时，会触发这几个方法：</p>
<p><img src="https://img.alicdn.com/tps/TB1KpKQJVXXXXbcXFXXXXXXXXXX-1020-392.png" alt="React-changeProps"></p>
<p><code>componentWillReceiveProps</code> 方法会在组件接收到新的 props 的时候调用。</p>
<p>用这个函数可以在 React 接收 props 之后，render 渲染之前更新 state 。在这个函数中，可以调用 this.setState 方法来改变 state ，而不会引起第二次渲染。</p>
<p><code>shouldComponentUpdate</code> 方法会在 <code>render</code> 方法之前执行，用来告诉 React 是否需要重新渲染当前组件。这个方法返回的是 Boolean 值。这个方法不会在组件初始化的时候执行。</p>
<p><code>componentWillUpdate</code> 方法会在 <code>shouldComponentUpdate</code> 返回 true 之后立即执行。我们不能在这个方法中使用 <code>this.setState</code> 如果需要更新 state 来响应某个 prop 改变，需要使用 <code>componentWillReceiveProps</code></p>
<p><code>componentDidUpdate</code> 方法会在组件的更新已经同步到 DOM 中之后，以及被调用。</p>
<p>这些方法都不会在组件初始化的时候调用。</p>
<h3 id="改变-State"><a href="#改变-State" class="headerlink" title="改变 State"></a>改变 State</h3><p>state 发生改变，会触发这几个方法：</p>
<p><img src="https://img.alicdn.com/tps/TB17cW0JVXXXXagXpXXXXXXXXXX-1012-336.png" alt="React-updateState"></p>
<p>这些方法都不会在组件初始化的时候调用。</p>
<h3 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h3><p><img src="https://img.alicdn.com/tps/TB1ityWJVXXXXbCXpXXXXXXXXXX-1006-152.png" alt="React-unMounting"></p>
<p>组件移除之前，会触发 <code>componentWillUnmount</code>方法，我们可以使用该方法来执行必要的清理，比如去除无效的定时器，移除在 componentDidMount 时创建的 DOM 元素等。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://facebook.github.io/react/" target="_blank" rel="external">React 官网</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="external">React 入门实例教程</a></li>
<li><a href="http://busypeoples.github.io/post/react-component-lifecycle/" target="_blank" rel="external">React Component Lifecycle</a></li>
<li><a href="http://reactjs.cn/react/index.html" target="_blank" rel="external">Reactjs.cn</a></li>
<li><a href="http://calendar.perfplanet.com/2013/diff/" target="_blank" rel="external">DOM diff</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React-学习笔记&quot;&gt;&lt;a href=&quot;#React-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;React 学习笔记&quot;&gt;&lt;/a&gt;React 学习笔记&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;引言是 &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React 官网&lt;/a&gt; 上是的自述。React 主要是用于构建用户界面。&lt;/p&gt;
&lt;h2 id=&quot;为什么使用-React&quot;&gt;&lt;a href=&quot;#为什么使用-React&quot; class=&quot;headerlink&quot; title=&quot;为什么使用 React?&quot;&gt;&lt;/a&gt;为什么使用 React?&lt;/h2&gt;&lt;p&gt;React 是一个 Facebook 和 Instagram 用来创建用户界面的 JavaScript 库。主要采用以下两个思想：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简单&lt;/p&gt;
&lt;p&gt;  仅仅只要表达出你的应用程序在任一个时间点应该长的样子，然后当底层的数据变了，React 会自动处理所有用户界面的更新。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;声明式&lt;/p&gt;
&lt;p&gt;   数据变化后，React 概念上与点击“刷新”按钮类似，但仅会更新变化的部分。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="study" scheme="http://ithans.com/tags/study/"/>
    
      <category term="react" scheme="http://ithans.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>iframe-size-not-work-in-IOS</title>
    <link href="http://ithans.com/2013/iframe-size-not-work-in-ios/"/>
    <id>http://ithans.com/2013/iframe-size-not-work-in-ios/</id>
    <published>2013-11-27T02:02:00.000Z</published>
    <updated>2016-02-20T11:01:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到一个问题，就是iFrame在iPad上展示的时候，宽度并没有固定，会直接超出，通过嵌套div之后，无法滚动。</p>
<p>HTML</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"frame_holder"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">class</span>=<span class="string">"my_frame"</span>&gt;</span></div><div class="line">    // The content</div><div class="line">  <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure>
<p>CSS</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#f0f0f0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.frame_holder</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#ffffff</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.my_frame</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e0e0e0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>例子：</p>
<p><a href="http://jsfiddle.net/R3PKB/2/" target="_blank" rel="external">http://jsfiddle.net/R3PKB/2/</a></p>
<p>可以在你的iPad上去看看这个页面</p>
<p><a href="http://jsfiddle.net/R3PKB/2/embedded/result" target="_blank" rel="external">http://jsfiddle.net/R3PKB/2/embedded/result</a></p>
<p>解决方案是：</p>
<p>在外层的<code>div</code>上添加<code>overflow:auto</code>和<code>-webkit-overflow-scrolling:touch</code>就可以了。</p>
<p><a href="http://jsfiddle.net/R3PKB/7/" target="_blank" rel="external">http://jsfiddle.net/R3PKB/7/</a></p>
<p>参考链接：</p>
<ul>
<li><p><a href="http://stackoverflow.com/questions/16937070/iframe-size-with-css-on-ios" target="_blank" rel="external">http://stackoverflow.com/questions/16937070/iframe-size-with-css-on-ios</a></p>
</li>
<li><p><a href="http://stackoverflow.com/questions/6139564/iframe-size-on-ipad/6721310#6721310" target="_blank" rel="external">http://stackoverflow.com/questions/6139564/iframe-size-on-ipad/6721310#6721310</a></p>
</li>
<li><p><a href="http://stackoverflow.com/questions/9814256/iframe-on-ios-ipad-content-cropping-issue" target="_blank" rel="external">http://stackoverflow.com/questions/9814256/iframe-on-ios-ipad-content-cropping-issue</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近遇到一个问题，就是iFrame在iPad上展示的时候，宽度并没有固定，会直接超出，通过嵌套div之后，无法滚动。&lt;/p&gt;
&lt;p&gt;HTML&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;frame_holder&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;iframe&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;my_frame&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // The content&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;iframe&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;CSS&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: relative;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#f0f0f0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.frame_holder&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: absolute;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;bottom&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;right&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#ffffff&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.my_frame&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;number&quot;&gt;#e0e0e0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Stack" scheme="http://ithans.com/categories/Stack/"/>
    
    
      <category term="IOS" scheme="http://ithans.com/tags/IOS/"/>
    
      <category term="CSS" scheme="http://ithans.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 折半搜索法（二分法）</title>
    <link href="http://ithans.com/2013/javascript-binary-search/"/>
    <id>http://ithans.com/2013/javascript-binary-search/</id>
    <published>2013-07-28T02:02:00.000Z</published>
    <updated>2016-02-20T11:01:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>周末，写个简单的算法。</p>
<p>JS二分法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.binarySearch = <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> l = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> h = <span class="keyword">this</span>.length - <span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (l&lt;= h) &#123;</div><div class="line">		<span class="keyword">var</span> m = l + ((h - l) &gt;&gt; <span class="number">1</span>);</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'l@%s,h@%s,m@%s'</span>, l, h, m);</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>[m] === v) &#123;</div><div class="line">			<span class="keyword">return</span> m;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>[m] &gt; v) &#123;</div><div class="line">			h = m - <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			l = m + <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> -(l + <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">78</span>, <span class="number">2312</span>, <span class="number">424</span>];</div><div class="line"></div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> x - y;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(arr);</div><div class="line"><span class="built_in">console</span>.log(arr.binarySearch(<span class="number">424</span>));</div></pre></td></tr></table></figure></p>
<p>说明：</p>
<p><code>var m = l + ((h - l) &gt;&gt; 1);</code>，为什么要用位运算？</p>
<p>其实用<code>var m = Math.floor((h+l)/2);</code>也是可以的，但是位运算的速度优于除法，并且还要再进行一次Math.floor。用位运算主要是出于性能考虑。<code>h+l</code>还存在溢出的问题，不过这个在web端应该不会遇到。。。Node.js就有可能了。</p>
<p>还有个复杂度的问题，下回再分析。</p>
<hr>
<p>伊泽<br>2013-07-29于杭州</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;周末，写个简单的算法。&lt;/p&gt;
&lt;p&gt;JS二分法：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.binarySearch = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;v&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; l = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; h = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (l&amp;lt;= h) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; m = l + ((h - l) &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;l@%s,h@%s,m@%s&#39;&lt;/span&gt;, l, h, m);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[m] === v) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; m;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[m] &amp;gt; v) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			h = m - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			l = m + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -(l + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Stack" scheme="http://ithans.com/categories/Stack/"/>
    
    
      <category term="JavaScript" scheme="http://ithans.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>周末有感</title>
    <link href="http://ithans.com/2013/weekend-thinking/"/>
    <id>http://ithans.com/2013/weekend-thinking/</id>
    <published>2013-07-27T16:00:00.000Z</published>
    <updated>2016-02-20T10:44:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天晚上跟女朋友去UME看了《速度与激情6》，很精彩。（那边的饮料真是坑，12块钱一瓶）</p>
<p>回来的路上，两人谈论起我喜欢的美国大片和她喜欢的感情戏。结果是，我觉得她说的话还是比较有道理的，她是这么说的：</p>
<blockquote>
<p>我看的电视剧改变了我很多，一些人生观价值观的东西，人生并不是为了一个目标而或者，并不是说，你赚到一个亿的时候才是你开心的时候，其他的时间都不开心，就算你真的赚到你一个亿了，你还是失去了之前的快乐。无论我们工作、学习，都是为了更加快乐的生活。</p>
</blockquote>
<p>“人生得意须尽欢，莫使金樽空对月”，再回想之前外包转正面试失败这件事情，其实未必也不是件好事，这次面试，认识了很多新的东西，知道自己有很多不足的地方，得到了一些前辈的指点，收获很大。结果，有时候往往是顺路而来的。</p>
<p>今天凌晨看了《精忠岳飞》的63，64集，岳飞征战一身，最后还是因为皇帝的疑心和嫉妒以及秦桧的谗言，白白葬送了十余年的胜利。《满江红·怒发冲冠》中有一句“莫等闲，白了少年头，空悲切”，很喜欢，也很心痛。</p>
<hr>
<p>伊泽<br>2013-07-28于杭州</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天晚上跟女朋友去UME看了《速度与激情6》，很精彩。（那边的饮料真是坑，12块钱一瓶）&lt;/p&gt;
&lt;p&gt;回来的路上，两人谈论起我喜欢的美国大片和她喜欢的感情戏。结果是，我觉得她说的话还是比较有道理的，她是这么说的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我看的电视剧改变了
    
    </summary>
    
      <category term="Life" scheme="http://ithans.com/categories/Life/"/>
    
    
      <category term="Thinking" scheme="http://ithans.com/tags/Thinking/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu12.04phpstorm 5.0.4增加快捷启动</title>
    <link href="http://ithans.com/2013/create-phpstorm-desktop/"/>
    <id>http://ithans.com/2013/create-phpstorm-desktop/</id>
    <published>2013-07-06T16:00:00.000Z</published>
    <updated>2016-02-20T13:28:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>在ubuntu上怎么创建phpstorm的快捷方式？(phpstorm.desktop)<br>其实很简单</p>
<p>phpstorm菜单 –&gt; Tools –&gt;  Create Desktop Entry …</p>
<p>按下super(win)键，搜索下phpstrom试试，也可以直接把phpstorm固定在任务栏快速启动。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在ubuntu上怎么创建phpstorm的快捷方式？(phpstorm.desktop)&lt;br&gt;其实很简单&lt;/p&gt;
&lt;p&gt;phpstorm菜单 –&amp;gt; Tools –&amp;gt;  Create Desktop Entry …&lt;/p&gt;
&lt;p&gt;按下super(win)键，搜索
    
    </summary>
    
      <category term="Stack" scheme="http://ithans.com/categories/Stack/"/>
    
    
      <category term="Linux" scheme="http://ithans.com/tags/Linux/"/>
    
      <category term="IDE" scheme="http://ithans.com/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>node.js Connection lost The server closed the connection.</title>
    <link href="http://ithans.com/2013/mysql-connection-lost/"/>
    <id>http://ithans.com/2013/mysql-connection-lost/</id>
    <published>2013-07-06T16:00:00.000Z</published>
    <updated>2016-02-20T11:02:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mysql模块"><a href="#mysql模块" class="headerlink" title="mysql模块"></a>mysql模块</h3><p>今天访问了下内网的一台服务器，发现挂掉了，SSH上去看了下<code>nohup.out</code>,发现报错了<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="title">events</span>.js:<span class="number">71</span></div><div class="line">        throw arguments[<span class="number">1</span>]; // <span class="type">Unhandled</span> 'error' event</div><div class="line">                       ^</div><div class="line"><span class="type">Error</span>: <span class="type">Connection</span> lost: <span class="type">The</span> server closed the connection.</div><div class="line">    at <span class="type">Protocol</span>.end (/var/www/html/utci/node_modules/mysql/lib/protocol/<span class="type">Protocol</span>.js:<span class="number">73</span>:<span class="number">13</span>)</div><div class="line">    at <span class="type">Socket</span>.onend (stream.js:<span class="number">66</span>:<span class="number">10</span>)</div><div class="line">    at <span class="type">Socket</span>.<span class="type">EventEmitter</span>.emit (events.js:<span class="number">126</span>:<span class="number">20</span>)</div><div class="line">    at <span class="type">TCP</span>.onread (net.js:<span class="number">417</span>:<span class="number">51</span>)</div></pre></td></tr></table></figure></p>
<p>这个错误的大概意思就是，未处理的<code>error</code>事件</p>
<p>原因是：mysql的连接久了以后，超时了。</p>
<p>解决方法是：</p>
<a id="more"></a>
<p>增加<code>error</code>事件的监听</p>
<p>database.js:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>),</div><div class="line">    settings = <span class="built_in">require</span>(<span class="string">'../settings'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports.getConnection = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> ((<span class="built_in">module</span>.exports.connection) &amp;&amp; (<span class="built_in">module</span>.exports.connection._socket)</div><div class="line">        &amp;&amp; (<span class="built_in">module</span>.exports.connection._socket.readable)</div><div class="line">        &amp;&amp; (<span class="built_in">module</span>.exports.connection._socket.writable)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports.connection;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(((<span class="built_in">module</span>.exports.connection) ?</div><div class="line">        <span class="string">"UNHEALTHY SQL CONNECTION; RE"</span> : <span class="string">""</span>) + <span class="string">"CONNECTING TO SQL."</span>);</div><div class="line">    <span class="keyword">var</span> connection = mysql.createConnection(&#123;</div><div class="line">        <span class="attr">host</span>: settings.host,</div><div class="line">        <span class="attr">port</span>: settings.port,</div><div class="line">        <span class="attr">database</span>: settings.db_name,</div><div class="line">        <span class="attr">user</span>: settings.username,</div><div class="line">        <span class="attr">password</span>: settings.password,</div><div class="line">        <span class="comment">//中文读取</span></div><div class="line">        charset: <span class="string">"utf8"</span></div><div class="line">    &#125;);</div><div class="line">    connection.connect(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"SQL CONNECT ERROR: "</span> + err);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"SQL CONNECT SUCCESSFUL."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    connection.on(<span class="string">"close"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"SQL CONNECTION CLOSED."</span>);</div><div class="line">    &#125;);</div><div class="line">    connection.on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"SQL CONNECTION ERROR: "</span> + err);</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">module</span>.exports.connection = connection;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports.connection;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Open a connection automatically at app startup.</span></div><div class="line"><span class="built_in">module</span>.exports.getConnection();</div><div class="line"><span class="comment">// If you've saved this file as database.js, then get and use the</span></div><div class="line"><span class="comment">// connection as in the following example:</span></div><div class="line"><span class="comment">// var database = require(__dirname + "/database");</span></div><div class="line"><span class="comment">// var connection = database.getConnection();</span></div><div class="line"><span class="comment">// connection.query(query, function(err, results) &#123; ....</span></div></pre></td></tr></table></figure>
<hr>
<p>伊泽<br>2013-07-07于杭州</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;mysql模块&quot;&gt;&lt;a href=&quot;#mysql模块&quot; class=&quot;headerlink&quot; title=&quot;mysql模块&quot;&gt;&lt;/a&gt;mysql模块&lt;/h3&gt;&lt;p&gt;今天访问了下内网的一台服务器，发现挂掉了，SSH上去看了下&lt;code&gt;nohup.out&lt;/code&gt;,发现报错了&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;events&lt;/span&gt;.js:&lt;span class=&quot;number&quot;&gt;71&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        throw arguments[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]; // &lt;span class=&quot;type&quot;&gt;Unhandled&lt;/span&gt; &#39;error&#39; event&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                       ^&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Connection&lt;/span&gt; lost: &lt;span class=&quot;type&quot;&gt;The&lt;/span&gt; server closed the connection.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at &lt;span class=&quot;type&quot;&gt;Protocol&lt;/span&gt;.end (/var/www/html/utci/node_modules/mysql/lib/protocol/&lt;span class=&quot;type&quot;&gt;Protocol&lt;/span&gt;.js:&lt;span class=&quot;number&quot;&gt;73&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at &lt;span class=&quot;type&quot;&gt;Socket&lt;/span&gt;.onend (stream.js:&lt;span class=&quot;number&quot;&gt;66&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at &lt;span class=&quot;type&quot;&gt;Socket&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;EventEmitter&lt;/span&gt;.emit (events.js:&lt;span class=&quot;number&quot;&gt;126&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at &lt;span class=&quot;type&quot;&gt;TCP&lt;/span&gt;.onread (net.js:&lt;span class=&quot;number&quot;&gt;417&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;51&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个错误的大概意思就是，未处理的&lt;code&gt;error&lt;/code&gt;事件&lt;/p&gt;
&lt;p&gt;原因是：mysql的连接久了以后，超时了。&lt;/p&gt;
&lt;p&gt;解决方法是：&lt;/p&gt;
    
    </summary>
    
      <category term="Stack" scheme="http://ithans.com/categories/Stack/"/>
    
    
      <category term="NodeJS" scheme="http://ithans.com/tags/NodeJS/"/>
    
      <category term="Mysql" scheme="http://ithans.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>怎么使用grunt-tps</title>
    <link href="http://ithans.com/2013/how-to-use-grunt-tps/"/>
    <id>http://ithans.com/2013/how-to-use-grunt-tps/</id>
    <published>2013-05-27T16:00:00.000Z</published>
    <updated>2016-02-20T11:02:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="grunt-tps是什么。"><a href="#grunt-tps是什么。" class="headerlink" title="grunt-tps是什么。"></a>grunt-tps是什么。</h3><p>首先来说下TPS是什么，TPS的全称是Taobao Pictures System，中文意思就是淘宝图片系统，主要用于存放图片，当然也可以存放其他的东西。</p>
<p>而grunt-tps就是tps的grunt插件，基于tpsmate，只需要经过简单的配置，就可以用grunt进行自动化管理。</p>
<h3 id="为什么要用grunt-tps"><a href="#为什么要用grunt-tps" class="headerlink" title="为什么要用grunt-tps"></a>为什么要用grunt-tps</h3><ol>
<li><strong>自动化</strong>，特别是当你的需要替换的目录是在一个文件夹下的，可以直接使用<code>xx/**/*</code>这样的方式。</li>
<li>和grunt结合，grunt是个大趋势，使用grunt进行将平时一些反复劳动交给工具去做，提高工作效率。所有的事情，一行<code>grunt</code>搞定，简单轻松愉快。</li>
<li>减少出错率，人工上传替换，难免会出现错误。</li>
</ol>
<a id="more"></a>
<h3 id="tpsmate是什么？"><a href="#tpsmate是什么？" class="headerlink" title="tpsmate是什么？"></a>tpsmate是什么？</h3><p>TPS Mate是TPS系统的命令行版本。其中命令行版本基于python，当前功能主要包括上传单张图片、批量上传图片以及样式文件中背景图片的批量上传以及输出。其目的主要为减少手工替换以及为可能出现的前端打包工具提供更为有效的支持。</p>
<h3 id="怎么安装tpsmate"><a href="#怎么安装tpsmate" class="headerlink" title="怎么安装tpsmate"></a>怎么安装tpsmate</h3><p>首先要安装<code>python</code>，<a href="">http://www.python.org/download/</a></p>
<h4 id="使用tpsmate需要具备的条件："><a href="#使用tpsmate需要具备的条件：" class="headerlink" title="使用tpsmate需要具备的条件："></a>使用tpsmate需要具备的条件：</h4><ol>
<li>淘宝内部环境，需要可以访问tms.taobao.com</li>
<li>有上传图片至tps的权限，看下你能否在<a href="http://tps.tms.taobao.com/photo/index.htm" target="_blank" rel="external">这里</a>上传图片</li>
</ol>
<h3 id="怎么使用grunt-tps"><a href="#怎么使用grunt-tps" class="headerlink" title="怎么使用grunt-tps"></a>怎么使用grunt-tps</h3><p>如果你以前从来没有用过<a href="http://gruntjs.com/" target="_blank" rel="external">Grunt</a>，推荐你看看Grunt的<a href="http://gruntjs.com/getting-started" target="_blank" rel="external">Getting Start</a></p>
<p>如何安装grunt？</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">npm</span> uninstall -g grunt</div><div class="line"><span class="title">npm</span> install -g grunt-cli</div></pre></td></tr></table></figure>
<p>接下来就是要安装grunt-tps<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">npm</span> install grunt <span class="comment">--save-dev</span></div><div class="line"><span class="title">npm</span> install grunt-tps <span class="comment">--save-dev</span></div></pre></td></tr></table></figure></p>
<p>你的Gruntfile.js中加入这一段</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tps: &#123;</div><div class="line"><span class="attr">options</span>: &#123;</div><div class="line">    <span class="attr">argv</span>: <span class="string">"--inplace"</span>,</div><div class="line">&#125;,</div><div class="line"><span class="attr">all</span>: [<span class="string">'test.css'</span>, <span class="string">'lib/**/*.css'</span>, <span class="string">'test/**/*.scss'</span>,<span class="string">'index.htm'</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你的Gruntfile.js中，看起来应该这样的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">grunt</span>) </span>&#123;</div><div class="line">    <span class="comment">// Project configuration.</span></div><div class="line">    grunt.initConfig(&#123;</div><div class="line">        <span class="comment">// Configuration to be run (and then tested).</span></div><div class="line">        tps: &#123;</div><div class="line">            <span class="attr">options</span>: &#123;</div><div class="line">                <span class="attr">argv</span>: <span class="string">"--inplace"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">all</span>: [<span class="string">'test.css'</span>, <span class="string">'lib/**/*'</span>, <span class="string">'test/**/*.scss'</span>,<span class="string">'index.htm'</span>]</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    grunt.loadNpmTasks(<span class="string">'grunt-tps'</span>);</div><div class="line">    grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'tps'</span>]);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li><code>argv</code>是tpsmate的参数，比如<code>--inplace</code>(用tps路径「线上路径」替换本地路径)，参考tpsmate的命令行方式</li>
</ul>
<p>grunt-tps源码地址:<a href="">https://github.com/yize/grunt-tps</a></p>
<hr>
<p>伊泽<br>2013-5-28于杭州</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;grunt-tps是什么。&quot;&gt;&lt;a href=&quot;#grunt-tps是什么。&quot; class=&quot;headerlink&quot; title=&quot;grunt-tps是什么。&quot;&gt;&lt;/a&gt;grunt-tps是什么。&lt;/h3&gt;&lt;p&gt;首先来说下TPS是什么，TPS的全称是Taobao Pictures System，中文意思就是淘宝图片系统，主要用于存放图片，当然也可以存放其他的东西。&lt;/p&gt;
&lt;p&gt;而grunt-tps就是tps的grunt插件，基于tpsmate，只需要经过简单的配置，就可以用grunt进行自动化管理。&lt;/p&gt;
&lt;h3 id=&quot;为什么要用grunt-tps&quot;&gt;&lt;a href=&quot;#为什么要用grunt-tps&quot; class=&quot;headerlink&quot; title=&quot;为什么要用grunt-tps&quot;&gt;&lt;/a&gt;为什么要用grunt-tps&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;自动化&lt;/strong&gt;，特别是当你的需要替换的目录是在一个文件夹下的，可以直接使用&lt;code&gt;xx/**/*&lt;/code&gt;这样的方式。&lt;/li&gt;
&lt;li&gt;和grunt结合，grunt是个大趋势，使用grunt进行将平时一些反复劳动交给工具去做，提高工作效率。所有的事情，一行&lt;code&gt;grunt&lt;/code&gt;搞定，简单轻松愉快。&lt;/li&gt;
&lt;li&gt;减少出错率，人工上传替换，难免会出现错误。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Stack" scheme="http://ithans.com/categories/Stack/"/>
    
    
      <category term="NodeJS" scheme="http://ithans.com/tags/NodeJS/"/>
    
      <category term="Grunt" scheme="http://ithans.com/tags/Grunt/"/>
    
  </entry>
  
  <entry>
    <title>恢复mac下的/usr/local/bin</title>
    <link href="http://ithans.com/2013/usr-local-bin/"/>
    <id>http://ithans.com/2013/usr-local-bin/</id>
    <published>2013-05-26T16:00:00.000Z</published>
    <updated>2016-02-20T10:48:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天一早配置phpstorm的时候，看到文件上有很多warn，比如，require不存在这样。</p>
<p>然后就开始坑爹的瞎搞了，点了<code>external libraries</code>里，添加了<code>/usr/local/bin/node</code></p>
<p>发现还是有warn报错，随之，看是悲剧的一步，虽然我是想删除external libraries中对node的引用，删除的时候，有红色的提示，没管那么多，直接跳过去了。。。</p>
<p>发现不对，在<code>terminal</code>中，各种<code>node</code>,<code>git</code>这样的命令没用了。</p>
<p>用sudo也是没有权限。</p>
<p>后来同事提醒，可能是权限问题。</p>
<p>查了下此时的/usr/local/bin下的文件，现在都是在我的名下，group也在admin下。</p>
<p>试了下重新安装node，发现，node在root名下，group是wheel。</p>
<p>并且是有<code>x</code>权限的。</p>
<p>解决方法如下：<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">sudo</span> chmod -<span class="type">R</span> +x /usr/local/bin/</div><div class="line"><span class="title">sudo</span> chown -<span class="type">R</span> root /usr/local/bin/</div><div class="line"><span class="title">sudo</span> chgrp -<span class="type">R</span> wheel /usr/local/bin/</div></pre></td></tr></table></figure></p>
<p>如此，解决。</p>
<hr>
<p>伊泽<br>2013-5-27于杭州</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天一早配置phpstorm的时候，看到文件上有很多warn，比如，require不存在这样。&lt;/p&gt;
&lt;p&gt;然后就开始坑爹的瞎搞了，点了&lt;code&gt;external libraries&lt;/code&gt;里，添加了&lt;code&gt;/usr/local/bin/node&lt;/code&gt;
    
    </summary>
    
      <category term="Stack" scheme="http://ithans.com/categories/Stack/"/>
    
    
      <category term="Shell" scheme="http://ithans.com/tags/Shell/"/>
    
      <category term="Mac" scheme="http://ithans.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>console.log</title>
    <link href="http://ithans.com/2013/console-log/"/>
    <id>http://ithans.com/2013/console-log/</id>
    <published>2013-05-23T16:00:00.000Z</published>
    <updated>2016-02-20T11:00:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为开发人员，用好调试工具可以提高工作效率，今天就来说说<code>console.log</code></p>
<p><code>console.log</code> 很简单，</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</div><div class="line"><span class="built_in">console</span>.log($<span class="number">0</span>) <span class="comment">//$0是elements panel 里面你选中的DOM结构。也可以使用console.dir($0)</span></div><div class="line"><span class="built_in">console</span>.log(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">//多参数</span></div></pre></td></tr></table></figure>
<p>以上这些都是基本的用法，不赘述。</p>
<p>下面就来说说，你可能不知道的console.log</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> userName = <span class="string">"yize"</span>,userPoints = <span class="number">100</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"User %s has %d points"</span>, userName, userPoints);</div></pre></td></tr></table></figure>
<p>运行以上命令，控制台会输出User yize has 100 points</p>
<p>$s,$d看起来是不是特别眼熟，貌似是大学的时候学过的C语言，哈哈</p>
<p>chrome dev tools 目前支持以下几种格式：</p>
<p><table><br>    <thead><br>        <tr><br>            <th>Format Specifier</th><br>            <th>Description</th><br>        </tr><br>    </thead><br>    <tbody><br>        <tr><br>            <td><br>                <code>%s</code><br>            </td><br>            <td>Formats the value as a string.//字符串</td><br>        </tr><br>        <tr><br>            <td><br>                <code>%d</code><br>                or<br>                <code>%i</code><br>            </td><br>            <td>Formats the value as an integer.//整形</td><br>        </tr><br>        <tr><br>            <td><br>                <code>%f</code><br>            </td><br>            <td>Formats the value as a floating point value.//浮点数</td><br>        </tr><br>        <tr><br>            <td><br>                <code>%o</code><br>            </td><br>            <td><br>                Formats the value as an expandable DOM element (as in the Elements panel).//DOM元素<br>            </td><br>        </tr><br>        <tr><br>            <td><br>                <code>%O</code><br>            </td><br>            <td>Formats the value as an expandable JavaScript object.//JS对象</td><br>        </tr><br>        <tr><br>            <td><br>                <code>%c</code><br>            </td><br>            <td><br>                Formats the output string according to CSS styles you provide.//CSS 样式<br>            </td><br>        </tr><br>    </tbody><br></table><br>目测<code>console.log(&#39;%O&#39;,document.body) === console.dir(document.body)</code></p>
<p>改变log的样式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> userName = <span class="string">"yize"</span>,userPoints = <span class="number">100</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"%cUser %s has %d points"</span>, <span class="string">"color:orange; background:blue; font-size: 16pt"</span>, userName, userPoints);</div></pre></td></tr></table></figure>
<p><img src="http://ww3.sinaimg.cn/large/60ee1ef8gw1e4z9k9snadj218i03e75p.jpg" alt="图片"><br>chrome dev tools很强大，官方文档:<a href="">https://developers.google.com/chrome-developer-tools/</a></p>
<hr>
<p>伊泽<br>2013-5-24于杭州</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为开发人员，用好调试工具可以提高工作效率，今天就来说说&lt;code&gt;console.log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console.log&lt;/code&gt; 很简单，&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//$0是elements panel 里面你选中的DOM结构。也可以使用console.dir($0)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//多参数&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上这些都是基本的用法，不赘述。&lt;/p&gt;
&lt;p&gt;下面就来说说，你可能不知道的console.log&lt;/p&gt;
    
    </summary>
    
      <category term="Stack" scheme="http://ithans.com/categories/Stack/"/>
    
    
      <category term="Browser" scheme="http://ithans.com/tags/Browser/"/>
    
  </entry>
  
  <entry>
    <title>popular nodejs modules</title>
    <link href="http://ithans.com/2013/popular-nodejs-modules/"/>
    <id>http://ithans.com/2013/popular-nodejs-modules/</id>
    <published>2013-05-19T16:00:00.000Z</published>
    <updated>2016-02-20T10:49:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>just for memory</p>
<ul>
<li><strong>colors</strong> <a href="">https://github.com/marak/colors.js/</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = <span class="built_in">require</span>(<span class="string">'./colors'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>.green); <span class="comment">// outputs green text</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'i like cake and pies'</span>.underline.red) <span class="comment">// outputs red underlined text</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'inverse the color'</span>.inverse); <span class="comment">// inverses the color</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'OMG Rainbows!'</span>.rainbow); <span class="comment">// rainbow (ignores spaces)</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>mkdirp</strong> <a href="">https://github.com/substack/node-mkdirp</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mkdirp = <span class="built_in">require</span>(<span class="string">'mkdirp'</span>);</div><div class="line">mkdirp(<span class="string">'/tmp/foo/bar/baz'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> (err) <span class="built_in">console</span>.error(err)</div><div class="line">    <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">'pow!'</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li><strong> iconv-lite </strong> <a href="">https://github.com/ashtuchkin/iconv-lite</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> iconv = <span class="built_in">require</span>(<span class="string">'iconv-lite'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Convert from an encoded buffer to string.</span></div><div class="line">str = iconv.decode(buf, <span class="string">'win1251'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Convert from string to an encoded buffer.</span></div><div class="line">buf = iconv.encode(<span class="string">"Sample input string"</span>, <span class="string">'win1251'</span>);</div></pre></td></tr></table></figure>
<ul>
<li><strong> send </strong> <a href="">https://github.com/visionmedia/send</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> send = <span class="built_in">require</span>(<span class="string">'send'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  <span class="comment">// your custom error-handling logic:</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    res.statusCode = err.status || <span class="number">500</span>;</div><div class="line">    res.end(err.message);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// your custom directory handling logic:</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">redirect</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    res.statusCode = <span class="number">301</span>;</div><div class="line">    res.setHeader(<span class="string">'Location'</span>, req.url + <span class="string">'/'</span>);</div><div class="line">    res.end(<span class="string">'Redirecting to '</span> + req.url + <span class="string">'/'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// transfer arbitrary files from within</span></div><div class="line">  <span class="comment">// /www/example.com/public/*</span></div><div class="line">  send(req, url.parse(req.url).pathname)</div><div class="line">  .root(<span class="string">'/www/example.com/public'</span>)</div><div class="line">  .on(<span class="string">'error'</span>, error)</div><div class="line">  .on(<span class="string">'directory'</span>, redirect)</div><div class="line">  .pipe(res);</div><div class="line">&#125;).listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<ul>
<li><strong> connect </strong> <a href="">https://github.com/senchalabs/connect</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">'connect'</span>)</div><div class="line">  , http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = connect()</div><div class="line">  .use(connect.favicon())</div><div class="line">  .use(connect.logger(<span class="string">'dev'</span>))</div><div class="line">  .use(connect.static(<span class="string">'public'</span>))</div><div class="line">  .use(connect.directory(<span class="string">'public'</span>))</div><div class="line">  .use(connect.cookieParser())</div><div class="line">  .use(connect.session(&#123; <span class="attr">secret</span>: <span class="string">'my secret here'</span> &#125;))</div><div class="line">  .use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    res.end(<span class="string">'Hello from Connect!\n'</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">http.createServer(app).listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<hr>
<p>伊泽<br>2013-5-20于杭州</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;just for memory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;colors&lt;/strong&gt; &lt;a href=&quot;&quot;&gt;https://github.com/marak/colors.js/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlig
    
    </summary>
    
      <category term="Stack" scheme="http://ithans.com/categories/Stack/"/>
    
    
      <category term="NodeJS" scheme="http://ithans.com/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>env node\r No such file or directory</title>
    <link href="http://ithans.com/2013/fix-node-r-No-such-file-or-directory-problem/"/>
    <id>http://ithans.com/2013/fix-node-r-No-such-file-or-directory-problem/</id>
    <published>2013-05-17T16:00:00.000Z</published>
    <updated>2016-02-20T11:01:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>env: node\r: No such file or directory</p>
<p>uitest是基于nodejs的，用<code>npm install uitest -g</code>安装完之后，在mac下运行，提示<code>env: node\r: No such file or directory</code>，检查了下bin文件中，第一行是</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /usr/bin/env node</span></div></pre></td></tr></table></figure>
<p>这看起来是没有任何问题的，当然是肉眼看起来。</p>
<a id="more"></a>
<p>问题的分析：</p>
<p>env：node\r </p>
<p>注意下这里的\r，好眼熟，是个换行，原谅我对DOS不是很了解。。。</p>
<p>google了下发现找到了<a href="https://github.com/foglcz/tscw/issues/1" target="_blank" rel="external">这个</a></p>
<p>里面提到，用dos2unix转换下就可以了。</p>
<p>我的机器上没装dos2unix，用brew装了个</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">brew</span> install dos2unix</div></pre></td></tr></table></figure>
<p>接着cd到 bin目录下</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">sudo</span> dos2unix uitest</div></pre></td></tr></table></figure>
<p>就可以了</p>
<hr>
<p>伊泽<br>2013-5-18于杭州</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;env: node\r: No such file or directory&lt;/p&gt;
&lt;p&gt;uitest是基于nodejs的，用&lt;code&gt;npm install uitest -g&lt;/code&gt;安装完之后，在mac下运行，提示&lt;code&gt;env: node\r: No such file or directory&lt;/code&gt;，检查了下bin文件中，第一行是&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#! /usr/bin/env node&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这看起来是没有任何问题的，当然是肉眼看起来。&lt;/p&gt;
    
    </summary>
    
      <category term="Stack" scheme="http://ithans.com/categories/Stack/"/>
    
    
      <category term="NodeJS" scheme="http://ithans.com/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>webkit桌面版本浏览器将不再支持-webkit-text-size-adjust</title>
    <link href="http://ithans.com/2013/webkit-text-size-adjust-no-longer-supported/"/>
    <id>http://ithans.com/2013/webkit-text-size-adjust-no-longer-supported/</id>
    <published>2013-05-16T16:00:00.000Z</published>
    <updated>2016-02-20T11:11:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>I<br> 昨天升级了chrome dev到 28.0.1500.11 dev-m 版本的时候发现，-webkit-text-size-adjust属性失效了，说来也比较巧，公司台式机上装的是chrome正式版，在用QQ管家升级软件的时候，就想着把台式机上的chrome也升级到dev版本。自己的demo上刚好也用到了10px的字体（一个角标）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.demo</span>&#123;</div><div class="line">	<span class="attribute">-webkit-text-size-adjust</span>:none;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">10px</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>demo在<a href="http://codepen.io/yize/pen/Hahiv" target="_blank" rel="external">这里</a></p>
<p>可以看到，在新版本中的chrome等webkit浏览器中，如果你没有主动去设置过字体大小下限的话，demo中的字应该都是一样大的。</p>
<p>chrome字体大小设置是在「设置-网络内容-字体大小下限」中。<br>safari默认不会开启下限，选项是在「偏好-高级-辅助功能-从不使用小于大小的字体」</p>
<p>官方移除说明在<a href="http://trac.webkit.org/changeset/145168" target="_blank" rel="external">这里</a></p>
<p>原因是：</p>
<blockquote>
<p>This property existed to support a number of Apple-internal clients of WebKit.<br>We no longer need this property, and since it’s clashing with a mobile version of the<br>same property with different meaning, let’s remove it altogether from the desktop build.</p>
</blockquote>
<p>大概意思是：</p>
<blockquote>
<p>这个属性的存在是为了支持一些使用webkit的苹果内部设备，我们不再需要这个属性了，而且还有一点就是，这个属性和手机版本的webkit浏览器有名字相同但是有不同的意思，所以我们还是将这个属性从桌面版本中移除了。</p>
</blockquote>
<p>要解决这个的问题，可以这么做</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.demo</span>&#123;</div><div class="line">	<span class="attribute">font-size</span>:<span class="number">10px</span>;</div><div class="line">	<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(0.83);</div><div class="line">	<span class="attribute">display</span>:inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>demo在<a href="http://codepen.io/yize/pen/rycgv" target="_blank" rel="external">这里</a></p>
<p>但是这么写当然不是正确的解决方法，目前先凑合着这么用了。</p>
<p>在statckoverflow上提了个<a href="http://stackoverflow.com/questions/16589785/webkit-text-size-adjust-is-no-longer-supported-how-to-set-font-size-to-less-tha" target="_blank" rel="external">问题</a>，老外的意见都是不赞成修改用户设定的大小下限，因为用户已经告知浏览器，自己能接收的最小的字体大小就是设定的那个大小，再小的话，看起来就会太小。</p>
<p>我的意见也是不希望去违背用户的意思，将字体设置成小于12像素。希望给用户最好的体验。</p>
<hr>
<p>伊泽<br>2013-5-17于杭州</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I&lt;br&gt; 昨天升级了chrome dev到 28.0.1500.11 dev-m 版本的时候发现，-webkit-text-size-adjust属性失效了，说来也比较巧，公司台式机上装的是chrome正式版，在用QQ管家升级软件的时候，就想着把台式机上的chrome也升
    
    </summary>
    
      <category term="Stack" scheme="http://ithans.com/categories/Stack/"/>
    
    
      <category term="Browser" scheme="http://ithans.com/tags/Browser/"/>
    
      <category term="CSS" scheme="http://ithans.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>前端编码问题汇总</title>
    <link href="http://ithans.com/2013/encode-war-in-F2E/"/>
    <id>http://ithans.com/2013/encode-war-in-F2E/</id>
    <published>2013-05-11T16:00:00.000Z</published>
    <updated>2016-02-20T11:02:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端可能会遇到的编码问题有哪些？"><a href="#前端可能会遇到的编码问题有哪些？" class="headerlink" title="前端可能会遇到的编码问题有哪些？"></a>前端可能会遇到的编码问题有哪些？</h2><a id="more"></a>
<ol>
<li>文件编码，GBK，注意IDE编码，不要默认转换UTF-8.</li>
<li>文件中内容的编码，可以将内容手动转成UTF-8编码或者unicode</li>
<li>scss中编码，解决方法，在scss头部加入 <code>@charset &quot;GBK&quot;</code></li>
<li>请求时的中文编码，淘宝规范在请求后加入 <code>_input_charset=utf-8</code></li>
<li>“&lt;&gt;”等直接输出的，应该用<code>&amp;lt；</code>,<code>&amp;gt；</code>这样的转义符号</li>
<li>如果直接读取用户输入的字符，应该用<code>encodeURIComponent</code>,<code>htmlspecialchars</code>等编码</li>
<li>JS引入的时候，带上<code>charset</code>，指定文件的编码</li>
<li><p>HTML页面中，<code>meta</code>指定<code>charset</code>,HTTP解析的时候，有三个地方可以埋藏代码信息：</p>
<ol>
<li>http头的Content-Type</li>
<li>html页面中的meta标签中制定的charset</li>
<li>页面正文数据（浏览器可以跟进二进制码来判断编码）</li>
</ol>
</li>
</ol>
<blockquote>
<p>如果三者编码不一致，浏览器会首先读取http头中的content-type，若没有设定编码，再查找页面中meta标签中的charset设定，如果还没有就以浏览器默认编码来显示，如果默认编码没有指定，浏览器会通过解析正文内容来判断编码.所以，页面是gbk编码，即便meta属性中设置 charset=utf-8，只要content-type中设定为gbk（或者GB2312、GB18030），该页面就正常显示，如果这时没有设定 content-type的编码，浏览器就会以meta中的charset属性为准，页面出现乱码。</p>
</blockquote>
<ol>
<li>JSONP中的中文问题，解决方法，后端返回<code>unicode</code>编码。</li>
<li>nodejs中的编码问题，可以使用<code>iconv</code>解决，或者直接用<code>buffer</code></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前端可能会遇到的编码问题有哪些？&quot;&gt;&lt;a href=&quot;#前端可能会遇到的编码问题有哪些？&quot; class=&quot;headerlink&quot; title=&quot;前端可能会遇到的编码问题有哪些？&quot;&gt;&lt;/a&gt;前端可能会遇到的编码问题有哪些？&lt;/h2&gt;
    
    </summary>
    
      <category term="Stack" scheme="http://ithans.com/categories/Stack/"/>
    
    
      <category term="JavaScript" scheme="http://ithans.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>cubieboard问题汇总</title>
    <link href="http://ithans.com/2013/cubieboard/"/>
    <id>http://ithans.com/2013/cubieboard/</id>
    <published>2013-05-11T16:00:00.000Z</published>
    <updated>2016-02-20T11:02:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cubieboard"><a href="#Cubieboard" class="headerlink" title="Cubieboard"></a>Cubieboard</h2><ol>
<li><p>Cubieboard是什么？  </p>
<p> Cubieboard是一个又小（10x6 厘米）又强大的<a href="http://zh.wikipedia.org/wiki/ARM%E6%9E%B6%E6%A7%8B" target="_blank" rel="external">ARM</a>开发板，它搭载了Allwinner <a href="http://linux-sunxi.org/A10" target="_blank" rel="external">A10</a>( Cortex-A8 )单芯片，特点：黑客友好，可扩展，成本非常低。<br> 通俗的说，就是一台搭载arm CPU的电脑<br> 目前淘宝价格￥379.</p>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>板子配置是怎样的？</p>
<ul>
<li>1G ARM cortex-A8处理器, NEON, VFPv3, 512KB二级缓存</li>
<li>Mali400, OpenGL ES GPU</li>
<li>1GB DDR3 @ 480MHz</li>
<li>HDMI 1080p高清输出</li>
<li>100M USB以太网口</li>
<li>4GB Nand Flash</li>
<li>2 USB Host, 1 MMC slot, 1 SATA, 1 ir</li>
<li>96个扩展pin,支持  i2c, spi, lcd和红外传感器, ..</li>
<li>运行Android, Ubuntu或其他Linux版本</li>
</ul>
</li>
<li><p>Cubieboard和Raspberry Pi 有关系吗？</p>
<p> 没有关系，网上说是Raspberry Pi的加强版，那只是宣传手段而已，Raspberry Pi是国外团队搞的，Cubieboard是国内团队搞的。<br> Cubieboard是国货，是由汤亮（Tom Cubie）领导的团队在indiegogo上集资后开发的</p>
<p> Cubieboard和Raspberry Pi的<a href="http://just4fun.cn/?cat=73" target="_blank" rel="external">对比</a></p>
<p> Cubieboard大约比树莓派快大约3到2倍的样子</p>
</li>
<li><p>Cubieboard可以用来干嘛？</p>
<p> 适合纯粹玩系统或用来影音娱乐,拥有1080p的HDMI输出口<br> cubieboard只有网口没有网卡（也就是没有network controller），所有的收包解包都由CPU完成，所以能支持的流量比较有限，不过撑个10万的闲链接还是没问题的。<br>还想了解一下cubieboard对https的支撑能力，于是在cubieboard上装了tengine，配上https签名再用ab压力测试，ab压测脚本是：</p>
</li>
</ol>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">ab</span> -n <span class="number">20000</span> -c <span class="number">20</span> -k url</div></pre></td></tr></table></figure>
<p>测试结果：访问https的QPS为<code>755</code>, 访问http的QPS为<code>1269</code></p>
<p>用cubieboard搭个小网站是绰绰有余的，一个小的聊天服务器兴许也可以。</p>
<ol>
<li><p>目前支持的系统</p>
<ul>
<li>android</li>
<li>xbmc</li>
<li>linaro</li>
<li>ubuntu</li>
<li>archlinux</li>
<li>freebsd</li>
</ul>
</li>
<li><p>利用动态域名解析服务，将cubieboard作为服务器。</p>
<p> 可以参考<a href="http://cn.cubieboard.org/forum.php?mod=viewthread&amp;tid=189&amp;extra=page%3D2%26orderby%3Dlastpost" target="_blank" rel="external">这篇文章</a></p>
<p> 推荐学习资料<a href="http://cb.e-fly.org/" target="_blank" rel="external">http://cb.e-fly.org/</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      cubieboard是什么，能用来干什么,怎么用cubieboard做服务器
    
    </summary>
    
      <category term="Stack" scheme="http://ithans.com/categories/Stack/"/>
    
    
      <category term="Cubieboard" scheme="http://ithans.com/tags/Cubieboard/"/>
    
  </entry>
  
  <entry>
    <title>浏览器的工作原理：新式网络浏览器幕后揭秘[转]</title>
    <link href="http://ithans.com/2013/how-browsers-work1/"/>
    <id>http://ithans.com/2013/how-browsers-work1/</id>
    <published>2013-02-24T16:00:00.000Z</published>
    <updated>2016-02-20T11:01:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><div class="preface"><br>    <h2>序言</h2><br>    <p><br>        这是一篇全面介绍 Webkit 和 Gecko 内部操作的入门文章，是以色列开发人员塔利·加希尔大量研究的成果。在过去的几年中，她查阅了所有公开发布的关于浏览器内部机制的数据<br>        <small><br>            （请参见<br>            <a href="#Resources">资源</a><br>            ）<br>        </small><br>        ，并花了很多时间来研读网络浏览器的源代码。她写道：<br>    </p><br>    <blockquote><br>        在 IE 占据 90% 市场份额的年代，我们除了把浏览器当成一个“黑箱”，什么也做不了。但是现在，开放源代码的浏览器拥有了<br>        <a href="http://techcrunch.com/2011/08/01/open-web-browsers/" target="_blank">过半的市场份额</a><br>        ，因此，是时候来揭开神秘的面纱，一探网络浏览器的内幕了。呃，里面只有数以百万行计的 C++ 代码…<br>    </blockquote><br>    塔利在<br>    <a href="http://taligarsiel.com/" target="_blank">她的网站</a><br>    上公布了自己的研究成果，但是我们觉得它值得让更多的人来了解，所以我们在此重新整理并公布(原文：<br>    <a href="http://taligarsiel.com/Projects/howbrowserswork1.htm" target="_blank" rel="external">How browsers work-Behind the scenes of modern web browsers</a><br>    )。<br>    <p><br>        作为一名网络开发人员， <strong>学习浏览器的内部工作原理将有助于您作出更明智的决策，并理解那些最佳开发实践的个中缘由</strong><br>        。尽管这是一篇相当长的文档，但是我们建议您花些时间来仔细阅读；读完之后，您肯定会觉得所费不虚。<br>        <cite>保罗·爱丽诗 (Paul Irish)，Chrome 浏览器开发人员事务部</cite><br>    </p><br></div><br><a id="more"></a></p>
<p><hr></p>
<p></p><h5 class="tocchap">&nbsp;</h5><p></p>
<p></p><h2 id="Introduction">简介</h2><p></p>
<p><br>    网络浏览器很可能是使用最广的软件。在这篇入门文章中，我将会介绍它们的幕后工作原理。我们会了解到，从您在地址栏输入&nbsp;<br>    <code>google.com</code><br>    &nbsp;直到您在浏览器屏幕上看到 Google 首页的整个过程中都发生了些什么。<br></p><br><h3>目录</h3><br><ol class="toc"><br>    <li><br>        <a href="#Introduction">简介</a><br>        <ol><br>            <li><br>                <a href="#The_browsers_we_will_talk_about">我们要讨论的浏览器</a><br>            </li><br>            <li><br>                <a href="#The_browser_main_functionality">浏览器的主要功能</a><br>            </li><br>            <li><br>                <a href="#The_browser_high_level_structure">浏览器的高层结构</a><br>            </li><br>        </ol><br>    </li><br>    <li><br>        <a href="#The_rendering_engine">呈现引擎</a><br>        <ol><br>            <li><br>                <a href="#Rendering_engines">呈现引擎</a><br>            </li><br>            <li><br>                <a href="#The_main_flow">主流程</a><br>            </li><br>            <li><br>                <a href="#Main_flow_examples">主流程示例</a><br>            </li><br>        </ol><br>    </li><br>    <li><br>        <a href="#Parsing_general">解析和 DOM 树构建</a><br>        <ol><br>            <li><br>                <a href="#Parsing_general">解析 - 综述</a><br>                <ol><br>                    <li><br>                        <a href="#Grammars">语法</a><br>                    </li><br>                    <li><br>                        <a href="#Parser_Lexer_combination">解析器和词法分析器的组合</a><br>                    </li><br>                    <li><br>                        <a href="#Translation">翻译</a><br>                    </li><br>                    <li><br>                        <a href="#Parsing_example">解析示例</a><br>                    </li><br>                    <li><br>                        <a href="#Formal_definitions_for_vocabulary_and_syntax">词汇和语法的正式定义</a><br>                    </li><br>                    <li><br>                        <a href="#Types_of_parsers">解析器类型</a><br>                    </li><br>                    <li><br>                        <a href="#Generating_parsers_automatically">自动生成解析器</a><br>                    </li><br>                </ol><br>            </li><br>            <li><br>                <a href="#HTML_Parser">HTML 解析器</a><br>                <ol><br>                    <li><br>                        <a href="#The_HTML_grammar_definition">HTML 语法定义</a><br>                    </li><br>                    <li><br>                        <a href="#Not_a_context_free_grammar">非与上下文无关的语法</a><br>                    </li><br>                    <li><br>                        <a href="#HTML_DTD">HTML DTD</a><br>                    </li><br>                    <li><br>                        <a href="#DOM">DOM</a><br>                    </li><br>                    <li><br>                        <a href="#The_parsing_algorithm">解析算法</a><br>                    </li><br>                    <li><br>                        <a href="#The_tokenization_algorithm">标记化算法</a><br>                    </li><br>                    <li><br>                        <a href="#Tree_construction_algorithm">树构建算法</a><br>                    </li><br>                    <li><br>                        <a href="#Actions_when_the_parsing_is_finished">解析结束后的操作</a><br>                    </li><br>                    <li><br>                        <a href="#Browsers_error_tolerance">浏览器的容错机制</a><br>                    </li><br>                </ol><br>            </li><br>            <li><br>                <a href="#CSS_parsing">CSS 解析</a><br>                <ol><br>                    <li><br>                        <a href="#Webkit_CSS_parser">Webkit CSS 解析器</a><br>                    </li><br>                </ol><br>            </li><br>            <li><br>                <a href="#The_order_of_processing_scripts_and_style_sheets">处理脚本和样式表的顺序</a><br>                <ol><br>                    <li><br>                        <a href="#Scripts">脚本</a><br>                    </li><br>                    <li><br>                        <a href="#Speculative_parsing">预解析</a><br>                    </li><br>                    <li><br>                        <a href="#Style_sheets">样式表</a><br>                    </li><br>                </ol><br>            </li><br>        </ol><br>    </li><br>    <li><br>        <a href="#Render_tree_construction">呈现树构建</a><br>        <ol><br>            <li><br>                <a href="#The_render_tree_relation_to_the_DOM_tree">呈现树和 DOM 树的关系</a><br>            </li><br>            <li><br>                <a href="#The_flow_of_constructing_the_tree">构建呈现树的流程</a><br>            </li><br>            <li><br>                <a href="#Style_Computation">样式计算</a><br>                <ol><br>                    <li><br>                        <a href="#Sharing_style_data">共享样式数据</a><br>                    </li><br>                    <li><br>                        <a href="#Firefox_rule_tree">Firefox 规则树</a><br>                        <ol><br>                            <li><br>                                <a href="#Division_into_structs">结构划分</a><br>                            </li><br>                            <li><br>                                <a href="#Computing_the_style_contexts_using_the_rule_tree">使用规则树计算样式上下文</a><br>                            </li><br>                        </ol><br>                    </li><br>                    <li><br>                        <a href="#Manipulating_the_rules_for_an_easy_match">对规则进行处理以简化匹配</a><br>                    </li><br>                    <li><br>                        <a href="#Applying_the_rules_in_the_correct_cascade_order">以正确的层叠顺序应用规则</a><br>                        <ol><br>                            <li><br>                                <a href="#Style_sheet_cascade_order">样式表层叠顺序</a><br>                            </li><br>                            <li><br>                                <a href="#Specificity">特异性</a><br>                            </li><br>                            <li><br>                                <a href="#Sorting_the_rules">规则排序</a><br>                            </li><br>                        </ol><br>                    </li><br>                </ol><br>            </li><br>            <li><br>                <a href="#Gradual_process">渐进式处理</a><br>            </li><br>        </ol><br>    </li><br>    <li><br>        <a href="#Layout">布局</a><br>        <ol><br>            <li><br>                <a href="#Dirty_bit_system">Dirty 位系统</a><br>            </li><br>            <li><br>                <a href="#Global_and_incremental_layout">全局布局和增量布局</a><br>            </li><br>            <li><br>                <a href="#Asynchronous_and_Synchronous_layout">异步布局和同步布局</a><br>            </li><br>            <li><br>                <a href="#Optimizations">优化</a><br>            </li><br>            <li><br>                <a href="#The_layout_process">布局处理</a><br>            </li><br>            <li><br>                <a href="#Width_calculation">宽度计算</a><br>            </li><br>            <li><br>                <a href="#Line_Breaking">换行</a><br>            </li><br>        </ol><br>    </li><br>    <li><br>        <a href="#Painting">绘制</a><br>        <ol><br>            <li><br>                <a href="#Global_and_Incremental">全局绘制和增量绘制</a><br>            </li><br>            <li><br>                <a href="#The_painting_order">绘制顺序</a><br>            </li><br>            <li><br>                <a href="#Firefox_display_list">Firefox 显示列表</a><br>            </li><br>            <li><br>                <a href="#Webkit_rectangle_storage">Webkit 矩形存储</a><br>            </li><br>        </ol><br>    </li><br>    <li><br>        <a href="#Dynamic_changes">动态变化</a><br>    </li><br>    <li><br>        <a href="#The_rendering_engines_threads">呈现引擎的线程</a><br>        <ol><br>            <li><br>                <a href="#Event_loop">事件循环</a><br>            </li><br>        </ol><br>    </li><br>    <li><br>        <a href="#css">CSS2 可视化模型</a><br>        <ol><br>            <li><br>                <a href="#The_canvas">画布</a><br>            </li><br>            <li><br>                <a href="#CSS_Box_model">CSS 框模型</a><br>            </li><br>            <li><br>                <a href="#Positioning_scheme">定位方案</a><br>            </li><br>            <li><br>                <a href="#Box_types">框类型</a><br>            </li><br>            <li><br>                <a href="#Positioning">定位</a><br>                <ol><br>                    <li><br>                        <a href="#Relative">相对定位</a><br>                    </li><br>                    <li><br>                        <a href="#Floats">浮动定位</a><br>                    </li><br>                    <li><br>                        <a href="#Absolute_and_fixed">绝对定位和固定定位</a><br>                    </li><br>                </ol><br>            </li><br>            <li><br>                <a href="#Layered_representation">分层展示</a><br>            </li><br>        </ol><br>    </li><br>    <li><br>        <a href="#Resources">资源</a><br>    </li><br></ol><br><div><br>    <h3 id="The_browsers_we_will_talk_about"><br>        <span class="tocnum">1.1</span><br>        我们要讨论的浏览器<br>    </h3><br>    <p><br>        目前使用的主流浏览器有五个：Internet Explorer、Firefox、Safari、Chrome 浏览器和 Opera。本文中以开放源代码浏览器为例，即 Firefox、Chrome 浏览器和 Safari（部分开源）。根据&nbsp;<br>        <a href="http://gs.statcounter.com/" target="_blank">StatCounter 浏览器统计数据</a><br>        ，目前（2011 年 8 月）Firefox、Safari 和 Chrome 浏览器的总市场占有率将近 60%。由此可见，如今开放源代码浏览器在浏览器市场中占据了非常坚实的部分。<br>    </p><br>    <h3 id="The_browser_main_functionality"><br>        <span class="tocnum">1.2</span><br>        浏览器的主要功能<br>    </h3><br>    <p><br>        浏览器的主要功能就是向服务器发出请求，在浏览器窗口中展示您选择的网络资源。这里所说的资源一般是指 HTML 文档，也可以是 PDF、图片或其他的类型。资源的位置由用户使用 URI（统一资源标示符）指定。<br>    </p><br>    <p><br>        浏览器解释并显示 HTML 文件的方式是在 HTML 和 CSS 规范中指定的。这些规范由网络标准化组织&nbsp;<br>        <a id="w3c">W3C</a><br>        （万维网联盟）进行维护。&nbsp;<br>        <br><br>        多年以来，各浏览器都没有完全遵从这些规范，同时还在开发自己独有的扩展程序，这给网络开发人员带来了严重的兼容性问题。如今，大多数的浏览器都是或多或少地遵从规范。<br>    </p><br>    <p>浏览器的用户界面有很多彼此相同的元素，其中包括：</p><br>    <ul><br>        <li>用来输入 URI 的地址栏</li><br>        <li>前进和后退按钮</li><br>        <li>书签设置选项</li><br>        <li>用于刷新和停止加载当前文档的刷新和停止按钮</li><br>        <li>用于返回主页的主页按钮</li><br><br>    </ul><br>    <p><br>        奇怪的是，浏览器的用户界面并没有任何正式的规范，这是多年来的最佳实践自然发展以及彼此之间相互模仿的结果。HTML5 也没有定义浏览器必须具有的用户界面元素，但列出了一些通用的元素，例如地址栏、状态栏和工具栏等。当然，各浏览器也可以有自己独特的功能，比如 Firefox 的下载管理器。<br>    </p><br>    <h3 id="The_browser_high_level_structure"><br>        <span class="tocnum">1.3</span><br>        浏览器的高层结构<br>    </h3><br>    <p><br>        浏览器的主要组件为 (<br>        <a href="#1_1">1.1</a><br>        )：<br>    </p><br>    <ol><br>        <li> <strong>用户界面</strong><br>            &nbsp;- 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗口显示的您请求的页面外，其他显示的各个部分都属于用户界面。<br>        </li><br>        <li><br>            <strong>浏览器引擎</strong><br>            &nbsp;- 在用户界面和呈现引擎之间传送指令。<br>        </li><br>        <li><br>            <strong>呈现引擎</strong><br>            &nbsp;- 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。<br>        </li><br>        <li><br>            <strong>网络</strong><br>            &nbsp;- 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。<br>        </li><br>        <li><br>            <strong>用户界面后端</strong><br>            &nbsp;- 用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。<br>        </li><br>        <li><br>            <strong>JavaScript 解释器</strong><br>            。用于解析和执行 JavaScript 代码。<br>        </li><br>        <li><br>            <strong>数据存储</strong><br>            。这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。<br>        </li><br><br>    </ol><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>    <img title="" src="http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/layers.png.pagespeed.ce.mFE5F8CtAV.png" alt="" width="500" height="339"></div><br><div><br>    <span data-count="1"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 图<br>    </span><br>    ：浏览器的主要组件。<br>    <p><br>        值得注意的是，和大多数浏览器不同，Chrome 浏览器的每个标签页都分别对应一个呈现引擎实例。每个标签页都是一个独立的进程。<br>    </p><br>    <h5 class="tocchap">Chapter 2</h5><br>    <h2 id="The_rendering_engine">呈现引擎</h2><br>    <p>呈现引擎的作用嘛…当然就是“呈现”了，也就是在浏览器的屏幕上显示请求的内容。</p><br>    <p><br>        默认情况下，呈现引擎可显示 HTML 和 XML 文档与图片。通过插件（或浏览器扩展程序），还可以显示其它类型的内容；例如，使用 PDF 查看器插件就能显示 PDF 文档。但是在本章中，我们将集中介绍其主要用途：显示使用 CSS 格式化的 HTML 内容和图片。<br>    </p><br>    <h3 id="Rendering_engines"><br>        <span class="tocnum">2.1</span><br>        呈现引擎<br>    </h3><br>    <p><br>        本文所讨论的浏览器（Firefox、Chrome 浏览器和 Safari）是基于两种呈现引擎构建的。Firefox 使用的是 Gecko，这是 Mozilla 公司“自制”的呈现引擎。而 Safari 和 Chrome 浏览器使用的都是 Webkit。<br>    </p><br>    <p><br>        Webkit 是一种开放源代码呈现引擎，起初用于 Linux 平台，随后由 Apple 公司进行修改，从而支持苹果机和 Windows。有关详情，请参阅<br>        <a href="http://webkit.org/" target="_blank">webkit.org</a><br>        。<br>    </p><br>    <h3 id="The_main_flow"><br>        <span class="tocnum">2.2</span><br>        主流程<br>    </h3><br>    <p>呈现引擎一开始会从网络层获取请求文档的内容，内容的大小一般限制在 8000 个块以内。</p><br>    <p>然后进行如下所示的基本流程：</p><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>    <img title="" src="http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/flow.png.pagespeed.ce.pK__f2HjCm.png" alt="" width="600" height="66"></div><br><div><br>    <span data-count="2"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;图<br>    </span><br>    ：呈现引擎的基本流程。<br>    <p><br>        呈现引擎将开始解析 HTML 文档，并将各标记逐个转化成“内容树”上的&nbsp;<br>        <a href="#DOM">DOM</a><br>        &nbsp;节点。同时也会解析外部 CSS 文件以及样式元素中的样式数据。HTML 中这些带有视觉指令的样式信息将用于创建另一个树结构：<br>        <a href="#Render_tree_construction">呈现树</a><br>        。<br>    </p><br>    <p>呈现树包含多个带有视觉属性（如颜色和尺寸）的矩形。这些矩形的排列顺序就是它们将在屏幕上显示的顺序。</p><br>    <p><br>        呈现树构建完毕之后，进入“<br>        <a href="#layout">布局</a><br>        ”处理阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标。下一个阶段是<br>        <a href="#Painting">绘制</a><br>        &nbsp;- 呈现引擎会遍历呈现树，由用户界面后端层将每个节点绘制出来。<br>    </p><br>    <p><br>        需要着重指出的是，这是一个渐进的过程。为达到更好的用户体验，呈现引擎会力求尽快将内容显示在屏幕上。它不必等到整个 HTML 文档解析完毕之后，就会开始构建呈现树和设置布局。在不断接收和处理来自网络的其余内容的同时，呈现引擎会将部分内容解析并显示出来。<br>    </p><br>    <h4 id="Main_flow_examples"><br>        <span class="tocnum">2.3</span><br>        主流程示例<br>    </h4><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>    <img src="http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/webkitflow.png.pagespeed.ce.KhQEkvbb3q.png" alt="" width="624" height="289"></div><br><div><br>    <span data-count="3"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 图<br>    </span><br>    ：Webkit 主流程<br></div><br><div><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>    <img src="http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/624x290wimage008.jpg.pagespeed.ic.Oe-U0yQz2z.webp" alt="" width="624" height="290"></div><br><div><br>    <span data-count="4"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;图<br>    </span><br>    ：Mozilla 的 Gecko 呈现引擎主流程 (<br>    <a href="#3_6">3.6</a><br>    )<br>    <p>从图 3 和图 4 可以看出，虽然 Webkit 和 Gecko 使用的术语略有不同，但整体流程是基本相同的。</p><br>    <p><br>        Gecko 将视觉格式化元素组成的树称为“框架树”。每个元素都是一个框架。Webkit 使用的术语是“呈现树”，它由“呈现对象”组成。对于元素的放置，Webkit 使用的术语是“布局”，而 Gecko 称之为“重排”。对于连接 DOM 节点和可视化信息从而创建呈现树的过程，Webkit 使用的术语是“附加”。有一个细微的非语义差别，就是 Gecko 在 HTML 与 DOM 树之间还有一个称为“内容槽”的层，用于生成 DOM 元素。我们会逐一论述流程中的每一部分：<br>    </p><br>    <p>&nbsp;</p><br>    <h5 class="tocchap">Chapter 3</h5><br>    <h3 id="Parsing_general"><br>        <span class="tocnum">3.1</span><br>        解析 - 综述<br>    </h3><br>    <p>解析是呈现引擎中非常重要的一个环节，因此我们要更深入地讲解。首先，来介绍一下解析。</p><br>    <p><br>        解析文档是指将文档转化成为有意义的结构，也就是可让代码理解和使用的结构。解析得到的结果通常是代表了文档结构的节点树，它称作解析树或者语法树。<br>    </p><br>    <p><br>        示例 - 解析&nbsp;<br>        <samp>2 + 3 - 1</samp><br>        &nbsp;这个表达式，会返回下面的树：<br>    </p><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>    <img src="http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/400x155wimage009.png.pagespeed.ic.KNewBFnKFk.png" alt="" width="400" height="155"></div><br><div><br>    <span data-count="5"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;图<br>    </span><br>    ：数学表达式树节点<br>    <h4 id="Grammars"><br>        <span class="tocnum">3.1.1</span><br>        语法<br>    </h4><br>    <p><br>        解析是以文档所遵循的语法规则（编写文档所用的语言或格式）为基础的。所有可以解析的格式都必须对应确定的语法（由词汇和语法规则构成）。这称为<br>        <a href="#context_free_grammar">与上下文无关的语法</a><br>        。人类语言并不属于这样的语言，因此无法用常规的解析技术进行解析。<br>    </p><br>    <h4 id="Parser_Lexer_combination"><br>        <span class="tocnum">3.1.2</span><br>        解析器和词法分析器的组合<br>    </h4><br>    <p>解析的过程可以分成两个子过程：词法分析和语法分析。</p><br>    <p>词法分析是将输入内容分割成大量标记的过程。标记是语言中的词汇，即构成内容的单位。在人类语言中，它相当于语言字典中的单词。</p><br>    <p>语法分析是应用语言的语法规则的过程。</p><br>    <p><br>        解析器通常将解析工作分给以下两个组件来处理：<br>        <strong>词法分析器</strong><br>        （有时也称为标记生成器），负责将输入内容分解成一个个有效标记；而<br>        <strong>解析器</strong><br>        负责根据语言的语法规则分析文档的结构，从而构建解析树。词法分析器知道如何将无关的字符（比如空格和换行符）分离出来。<br>    </p><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>    <img src="http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image011.png.pagespeed.ce.yyU1s1o5di.png" alt="" width="101" height="300"></div><br><div><br>    <span data-count="6"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;图<br>    </span><br>    ：从源文档到解析树<br>    <p><br>        解析是一个迭代的过程。通常，解析器会向词法分析器请求一个新标记，并尝试将其与某条语法规则进行匹配。如果发现了匹配规则，解析器会将一个对应于该标记的节点添加到解析树中，然后继续请求下一个标记。<br>    </p><br>    <p><br>        如果没有规则可以匹配，解析器就会将标记存储到内部，并继续请求标记，直至找到可与所有内部存储的标记匹配的规则。如果找不到任何匹配规则，解析器就会引发一个异常。这意味着文档无效，包含语法错误。<br>    </p><br>    <h4 id="Translation"><br>        <span class="tocnum">3.1.3</span><br>        翻译<br>    </h4><br>    <p><br>        很多时候，解析树还不是最终产品。解析通常是在翻译过程中使用的，而翻译是指将输入文档转换成另一种格式。编译就是这样一个例子。编译器可将源代码编译成机器代码，具体过程是首先将源代码解析成解析树，然后将解析树翻译成机器代码文档。<br>    </p><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>    <img src="http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image013.png.pagespeed.ce.EGqDLSzaGw.png" alt="" width="104" height="400"></div><br><div><br>    <span data-count="7"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 图<br>    </span><br>    ：编译流程<br>    <h4 id="Parsing_example"><br>        <span class="tocnum">3.1.4</span><br>        解析示例<br>    </h4><br>    <p>在图 5 中，我们通过一个数学表达式建立了解析树。现在，让我们试着定义一个简单的数学语言，用来演示解析的过程。</p><br>    <p>&nbsp;</p><br>    <p>词汇：我们用的语言可包含整数、加号和减号。</p><br>    <p>语法：</p><br>    <ol><br>        <li>构成语言的语法单位是表达式、项和运算符。</li><br>        <li>我们用的语言可以包含任意数量的表达式。</li><br>        <li>表达式的定义是：一个“项”接一个“运算符”，然后再接一个“项”。</li><br>        <li>运算符是加号或减号。</li><br>        <li>项是一个整数或一个表达式。</li><br><br>    </ol><br>    <p>&nbsp;</p><br>    <p><br>        让我们分析一下&nbsp;<br>        <samp>2 + 3 - 1</samp><br>        。&nbsp;<br>        <br><br>        匹配语法规则的第一个子串是&nbsp;<br>        <samp>2</samp><br>        ，而根据第 5 条语法规则，这是一个项。匹配语法规则的第二个子串是&nbsp;<br>        <samp>2 + 3</samp><br>        ，而根据第 3 条规则（一个项接一个运算符，然后再接一个项），这是一个表达式。下一个匹配项已经到了输入的结束。<br>        <samp>2 + 3 - 1</samp><br>        &nbsp;是一个表达式，因为我们已经知道&nbsp;<br>        <samp>2 + 3</samp><br>        &nbsp;是一个项，这样就符合“一个项接一个运算符，然后再接一个项”的规则。<br>        <samp>2 + +</samp><br>        &nbsp;不与任何规则匹配，因此是无效的输入。<br>    </p><br>    <h4 id="Formal_definitions_for_vocabulary_and_syntax"><br>        <span class="tocnum">3.1.5</span><br>        词汇和语法的正式定义<br>    </h4><br>    <p><br>        词汇通常用<br>        <a href="http://www.regular-expressions.info/" target="_blank">正则表达式</a><br>        表示。<br>    </p><br>    <p>例如，我们的示例语言可以定义如下：</p><br>    <pre class="prettyprint"><span class="pln">INTEGER </span><span class="pun">:</span><span class="lit">0</span><span class="pun">|[</span><span class="lit">1</span><span class="pun">-</span><span class="lit">9</span><span class="pun">][</span><span class="lit">0</span><span class="pun">-</span><span class="lit">9</span><span class="pun">]<em></em></span><span class="pln">PLUS </span><span class="pun">:</span><span class="pun">+</span><span class="pln">MINUS</span><span class="pun">:</span><span class="pun">-</span></pre><br>    正如您所看到的，这里用正则表达式给出了整数的定义。<br>    <p>&nbsp;</p><br>    <p><br>        语法通常使用一种称为&nbsp;<br>        <a href="http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form" target="_blank">BNF</a><br>        &nbsp;的格式来定义。我们的示例语言可以定义如下：<br>    </p><br>    <pre class="prettyprint"><span class="pln">expression </span><span class="pun">:=</span><span class="pln">  term  operation  term<br>operation </span><span class="pun">:=</span><span class="pln">PLUS </span><span class="pun">|</span><span class="pln"> MINUS<br>term </span><span class="pun">:=</span><span class="pln">INTEGER </span><span class="pun">|</span><span class="pln">expression</span></pre><br>    <p>&nbsp;</p><br>    <p><br>        之前我们说过，如果语言的语法是<br>        <a id="context_free_grammar">与上下文无关的语法</a><br>        ，就可以由常规解析器进行解析。与上下文无关的语法的直观定义就是可以完全用 BNF 格式表达的语法。有关正式定义，请参阅<br>        <a href="http://en.wikipedia.org/wiki/Context-free_grammar" target="_blank">关于与上下文无关的语法的维基百科文章</a><br>        。<br>    </p><br>    <h4 id="Types_of_parsers"><br>        <span class="tocnum">3.1.6</span><br>        解析器类型<br>    </h4><br>    <p><br>        有两种基本类型的解析器：自上而下解析器和自下而上解析器。直观地来说，自上而下的解析器从语法的高层结构出发，尝试从中找到匹配的结构。而自下而上的解析器从低层规则出发，将输入内容逐步转化为语法规则，直至满足高层规则。<br>    </p><br>    <p>让我们来看看这两种解析器会如何解析我们的示例：</p><br>    <p><br>        自上而下的解析器会从高层的规则开始：首先将&nbsp;<br>        <samp>2 + 3</samp><br>        &nbsp;标识为一个表达式，然后将&nbsp;<br>        <samp>2 + 3 - 1</samp><br>        &nbsp;标识为一个表达式（标识表达式的过程涉及到匹配其他规则，但是起点是最高级别的规则）。<br>    </p><br>    <p><br>        自下而上的解析器将扫描输入内容，找到匹配的规则后，将匹配的输入内容替换成规则。如此继续替换，直到输入内容的结尾。部分匹配的表达式保存在解析器的堆栈中。<br>    </p><br>    <table id="stack"><br>        <tbody><br>            <tr><br>                <th>堆栈</th><br>                <th>输入</th><br>            </tr><br>            <tr><br>                <td>&nbsp;</td><br>                <td><br>                    <samp>2 + 3 - 1</samp><br>                </td><br>            </tr><br>            <tr><br>                <td>项</td><br>                <td><br>                    <samp>+ 3 - 1</samp><br>                </td><br>            </tr><br>            <tr><br>                <td>项运算</td><br>                <td><br>                    <samp>3 - 1</samp><br>                </td><br>            </tr><br>            <tr><br>                <td>表达式</td><br>                <td><br>                    <samp>- 1</samp><br>                </td><br>            </tr><br>            <tr><br>                <td>表达式运算符</td><br>                <td><br>                    <samp>1</samp><br>                </td><br>            </tr><br>            <tr><br>                <td>表达式</td><br>                <td><br>                    <samp>&nbsp;</samp><br>                </td><br>            </tr><br>        </tbody><br>    </table><br>    这种自下而上的解析器称为移位归约解析器，因为输入在向右移位（设想有一个指针从输入内容的开头移动到结尾），并且逐渐归约到语法规则上。<br>    <p>&nbsp;</p><br>    <h4 id="Generating_parsers_automatically"><br>        <span class="tocnum">3.1.7</span><br>        自动生成解析器<br>    </h4><br>    <p><br>        有一些工具可以帮助您生成解析器，它们称为解析器生成器。您只要向其提供您所用语言的语法（词汇和语法规则），它就会生成相应的解析器。创建解析器需要对解析有深刻理解，而人工创建优化的解析器并不是一件容易的事情，所以解析器生成器是非常实用的。<br>    </p><br>    <p><br>        <a id="parser_generators">Webkit</a><br>        &nbsp;使用了两种非常有名的解析器生成器：用于创建词法分析器的&nbsp;<br>        <a href="http://en.wikipedia.org/wiki/Flex_lexical_analyser" target="_blank">Flex</a><br>        &nbsp;以及用于创建解析器的&nbsp;<br>        <a href="http://www.gnu.org/software/bison/" target="_blank">Bison</a><br>        （您也可能遇到 Lex 和 Yacc 这样的别名）。Flex 的输入是包含标记的正则表达式定义的文件。Bison 的输入是采用 BNF 格式的语言语法规则。<br>    </p><br>    <h3 id="HTML_Parser"><br>        <span class="tocnum">3.2</span><br>        HTML 解析器<br>    </h3><br>    <p>HTML 解析器的任务是将 HTML 标记解析成解析树。</p><br>    <h4 id="The_HTML_grammar_definition"><br>        <span class="tocnum">3.2.1</span><br>        HTML 语法定义<br>    </h4><br>    <p><br>        HTML 的词汇和语法在 W3C 组织创建的<br>        <a href="#w3c">规范</a><br>        中进行了定义。当前的版本是 HTML4，HTML5 正在处理过程中。<br>    </p><br>    <h4 id="Not_a_context_free_grammar"><br>        <span class="tocnum">3.2.2</span><br>        非与上下文无关的语法<br>    </h4><br>    <p>正如我们在解析过程的简介中已经了解到的，语法可以用 BNF 等格式进行正式定义。</p><br>    <p><br>        很遗憾，所有的常规解析器都不适用于 HTML（我并不是开玩笑，它们可以用于解析 CSS 和 JavaScript）。HTML 并不能很容易地用解析器所需的与上下文无关的语法来定义。<br>    </p><br>    <p><br>        有一种可以定义 HTML 的正规格式：DTD（Document Type Definition，文档类型定义），但它不是与上下文无关的语法。<br>    </p><br>    <p><br>        这初看起来很奇怪：HTML 和 XML 非常相似。有很多 XML 解析器可以使用。HTML 存在一个 XML 变体 (XHTML)，那么有什么大的区别呢？<br>    </p><br>    <p><br>        区别在于 HTML 的处理更为“宽容”，它允许您省略某些隐式添加的标记，有时还能省略一些起始或者结束标记等等。和 XML 严格的语法不同，HTML 整体来看是一种“软性”的语法。<br>    </p><br>    <p><br>        显然，这种看上去细微的差别实际上却带来了巨大的影响。一方面，这是 HTML 如此流行的原因：它能包容您的错误，简化网络开发。另一方面，这使得它很难编写正式的语法。概括地说，HTML 无法很容易地通过常规解析器解析（因为它的语法不是与上下文无关的语法），也无法通过 XML 解析器来解析。<br>    </p><br>    <h4 id="HTML_DTD"><br>        <span class="tocnum">3.2.3</span><br>        HTML DTD<br>    </h4><br>    <p><br>        HTML 的定义采用了 DTD 格式。此格式可用于定义&nbsp;<br>        <a href="http://en.wikipedia.org/wiki/Standard_Generalized_Markup_Language" target="_blank">SGML</a><br>        &nbsp;族的语言。它包括所有允许使用的元素及其属性和层次结构的定义。如上文所述，HTML DTD 无法构成与上下文无关的语法。<br>    </p><br>    <p><br>        DTD 存在一些变体。严格模式完全遵守 HTML 规范，而其他模式可支持以前的浏览器所使用的标记。这样做的目的是确保向下兼容一些早期版本的内容。最新的严格模式 DTD 可以在这里找到：<br>        <a href="http://www.w3.org/TR/html4/strict.dtd" target="_blank">www.w3.org/TR/html4/strict.dtd</a><br>    </p><br>    <h4 id="DOM"><br>        <span class="tocnum">3.2.4</span><br>        DOM<br>    </h4><br>    <p><br>        解析器的输出“解析树”是由 DOM 元素和属性节点构成的树结构。DOM 是文档对象模型 (Document Object Model) 的缩写。它是 HTML 文档的对象表示，同时也是外部内容（例如 JavaScript）与 HTML 元素之间的接口。&nbsp;<br>        <br><br>        解析树的根节点是“<br>        <a href="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html#i-Document" target="_blank">Document</a><br>        ”对象。<br>    </p><br>    <p>DOM 与标记之间几乎是一一对应的关系。比如下面这段标记：</p><br>    <pre class="prettyprint"><span class="tag">&lt;html&gt;</span><span class="tag">&lt;body&gt;</span><span class="tag">&lt;p&gt;</span><span class="pln">Hello World</span><span class="tag">&lt;/p&gt;</span><span class="tag">&lt;div&gt;</span><span class="tag">&lt;img</span><span class="atn">src</span><span class="pun">=</span><span class="atv">“example.png”</span><span class="tag">/&gt;&lt;/div&gt;</span><span class="tag">&lt;/body&gt;</span><span class="tag">&lt;/html&gt;</span></pre><br>    可翻译成如下的 DOM 树：<br>    <p>&nbsp;</p><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>    <img src="http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image015.png.pagespeed.ce.OZcOUqth9Q.png" alt="" width="400" height="219"></div><br><div><br>    <span data-count="8"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 图<br>    </span><br>    ：示例标记的 DOM 树<br>    <p><br>        和 HTML 一样，DOM 也是由 W3C 组织指定的。请参见&nbsp;<br>        <a href="http://www.w3.org/DOM/DOMTR" target="_blank">www.w3.org/DOM/DOMTR</a><br>        。这是关于文档操作的通用规范。其中一个特定模块描述针对 HTML 的元素。HTML 的定义可以在这里找到：<br>        <a href="http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/idl-definitions.html" target="_blank"><br>            www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/idl-definitions.html<br>        </a><br>        。<br>    </p><br>    <p><br>        我所说的树包含 DOM 节点，指的是树是由实现了某个 DOM 接口的元素构成的。浏览器所用的具体实现也会具有一些其他属性，供浏览器在内部使用。<br>    </p><br>    <h4 id="The_parsing_algorithm"><br>        <span class="tocnum">3.2.5</span><br>        解析算法<br>    </h4><br>    <p>我们在之前章节已经说过，HTML 无法用常规的自上而下或自下而上的解析器进行解析。</p><br>    <p>原因在于：</p><br>    <ol><br>        <li>语言的宽容本质。</li><br>        <li>浏览器历来对一些常见的无效 HTML 用法采取包容态度。</li><br>        <li><br>            解析过程需要不断地反复。源内容在解析过程中通常不会改变，但是在 HTML 中，脚本标记如果包含&nbsp;<br>            <code>document.write</code><br>            ，就会添加额外的标记，这样解析过程实际上就更改了输入内容。<br>        </li><br>    </ol><br>    <p>由于不能使用常规的解析技术，浏览器就创建了自定义的解析器来解析 HTML。</p><br>    <p><br>        <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html" target="_blank">HTML5 规范详细地描述了解析算法</a><br>        。此算法由两个阶段组成：标记化和树构建。<br>    </p><br>    <p>标记化是词法分析过程，将输入内容解析成多个标记。HTML 标记包括起始标记、结束标记、属性名称和属性值。</p><br>    <p>标记生成器识别标记，传递给树构造器，然后接受下一个字符以识别下一个标记；如此反复直到输入的结束。</p><br>    <img src="http://1-ps.googleusercontent.com/h/www.gstatic.com/psa/static/1.gif" alt="" width="308" height="400"><br>    <img src="http://pic002.cnblogs.com/images/2012/40481/2012103113175793.jpg" alt=""></div><br><div><br>    <span data-count="9"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;图<br>    </span><br>    ：HTML<br></div><br><div><br>    <p>&nbsp;</p><br>    解析流程（摘自 HTML5 规范）<br>    <h4 id="The_tokenization_algorithm"><br>        <span class="tocnum">3.2.6</span><br>        标记化算法<br>    </h4><br>    <p><br>        该算法的输出结果是 HTML 标记。该算法使用状态机来表示。每一个状态接收来自输入信息流的一个或多个字符，并根据这些字符更新下一个状态。当前的标记化状态和树结构状态会影响进入下一状态的决定。这意味着，即使接收的字符相同，对于下一个正确的状态也会产生不同的结果，具体取决于当前的状态。该算法相当复杂，无法在此详述，所以我们通过一个简单的示例来帮助大家理解其原理。<br>    </p><br>    <p>基本示例 - 将下面的 HTML 代码标记化：</p><br>    <pre class="prettyprint"><span class="tag">&lt;html&gt;</span><span class="tag">&lt;body&gt;</span><span class="pln">Hello world</span><span class="tag">&lt;/body&gt;</span><span class="tag">&lt;/html&gt;</span></pre><br>    <p><br>        初始状态是数据状态。遇到字符&nbsp;<br>        <code>&lt;</code><br>        &nbsp;时，状态更改为<br>        <strong>“标记打开状态”</strong><br>        。接收一个&nbsp;<br>        <code>a-z</code><br>        &nbsp;字符会创建“起始标记”，状态更改为<br>        <strong>“标记名称状态”</strong><br>        。这个状态会一直保持到接收&nbsp;<br>        <code>&gt;</code><br>        &nbsp;字符。在此期间接收的每个字符都会附加到新的标记名称上。在本例中，我们创建的标记是&nbsp;<br>        <code>html</code><br>        &nbsp;标记。<br>    </p><br>    <p><br>        遇到&nbsp;<br>        <code>&gt;</code><br>        &nbsp;标记时，会发送当前的标记，状态改回<br>        <strong>“数据状态”</strong><br>        。<br>        <code>&lt;body&gt;</code><br>        &nbsp;标记也会进行同样的处理。目前&nbsp;<br>        <code>html</code><br>        &nbsp;和&nbsp;<br>        <code>body</code><br>        &nbsp;标记均已发出。现在我们回到<br>        <strong>“数据状态”</strong><br>        。接收到&nbsp;<br>        <code>Hello world</code><br>        &nbsp;中的&nbsp;<br>        <code>H</code><br>        &nbsp;字符时，将创建并发送字符标记，直到接收&nbsp;<br>        <code>&lt;/body&gt;</code><br>        &nbsp;中的&nbsp;<br>        <code>&lt;</code><br>        。我们将为&nbsp;<br>        <code>Hello world</code><br>        &nbsp;中的每个字符都发送一个字符标记。<br>    </p><br>    <p><br>        现在我们回到<br>        <strong>“标记打开状态”</strong><br>        。接收下一个输入字符&nbsp;<br>        <code>/</code><br>        &nbsp;时，会创建&nbsp;<br>        <code>end tag token</code><br>        &nbsp;并改为<br>        <strong>“标记名称状态”</strong><br>        。我们会再次保持这个状态，直到接收&nbsp;<br>        <code>&gt;</code><br>        。然后将发送新的标记，并回到<br>        <strong>“数据状态”</strong><br>        。<br>        <code>&lt;/html&gt;</code><br>        &nbsp;输入也会进行同样的处理。<br>    </p><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>    <img src="http://pic002.cnblogs.com/images/2012/40481/2012103113184113.png" alt=""><br>    <br><br>    <span data-count="10"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;图<br>    </span><br>    ：对示例输入进行标记化<br>    <h4 id="Tree_construction_algorithm"><br>        <span class="tocnum">3.2.7</span><br>        树构建算法<br>    </h4><br>    <p><br>        在创建解析器的同时，也会创建 Document 对象。在树构建阶段，以 Document 为根节点的 DOM 树也会不断进行修改，向其中添加各种元素。标记生成器发送的每个节点都会由树构建器进行处理。规范中定义了每个标记所对应的 DOM 元素，这些元素会在接收到相应的标记时创建。这些元素不仅会添加到 DOM 树中，还会添加到开放元素的堆栈中。此堆栈用于纠正嵌套错误和处理未关闭的标记。其算法也可以用状态机来描述。这些状态称为“插入模式”。<br>    </p><br>    <p>让我们来看看示例输入的树构建过程：</p><br>    <pre class="prettyprint"><span class="tag">&lt;html&gt;</span><span class="tag">&lt;body&gt;</span><span class="pln">Hello world</span><span class="tag">&lt;/body&gt;</span><span class="tag">&lt;/html&gt;</span></pre><br>    <p><br>        树构建阶段的输入是一个来自标记化阶段的标记序列。第一个模式是<br>        <strong>“initial mode”</strong><br>        。接收 HTML 标记后转为<br>        <strong>“before html”</strong><br>        模式，并在这个模式下重新处理此标记。这样会创建一个 HTMLHtmlElement 元素，并将其附加到 Document 根对象上。<br>    </p><br>    <p><br>        然后状态将改为<br>        <strong>“before head”</strong><br>        。此时我们接收“body”标记。即使我们的示例中没有“head”标记，系统也会隐式创建一个 HTMLHeadElement，并将其添加到树中。<br>    </p><br>    <p><br>        现在我们进入了<br>        <strong>“in head”</strong><br>        模式，然后转入<br>        <strong>“after head”</strong><br>        模式。系统对 body 标记进行重新处理，创建并插入 HTMLBodyElement，同时模式转变为<br>        <strong>“body”</strong><br>        。<br>    </p><br>    <p><br>        现在，接收由“Hello world”字符串生成的一系列字符标记。接收第一个字符时会创建并插入“Text”节点，而其他字符也将附加到该节点。<br>    </p><br>    <p><br>        接收 body 结束标记会触发<br>        <strong>“after body”</strong><br>        模式。现在我们将接收 HTML 结束标记，然后进入<br>        <strong>“after after body”</strong><br>        模式。接收到文件结束标记后，解析过程就此结束。<br>    </p><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>    <img src="http://pic002.cnblogs.com/images/2012/40481/2012103113224961.gif" alt=""><br>    <br><br>    <span data-count="11"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 图<br>    </span><br>    ：示例 HTML 的树构建<br>    <h4 id="Actions_when_the_parsing_is_finished"><br>        <span class="tocnum">3.2.8</span><br>        解析结束后的操作<br>    </h4><br>    <p><br>        在此阶段，浏览器会将文档标注为交互状态，并开始解析那些处于“deferred”模式的脚本，也就是那些应在文档解析完成后才执行的脚本。然后，文档状态将设置为“完成”，一个“加载”事件将随之触发。<br>    </p><br>    <p><br>        您可以<br>        <a href="http://www.w3.org/TR/html5/syntax.html#html-parser" target="_blank">在 HTML5 规范中查看标记化和树构建的完整算法</a><br>    </p><br>    <h4 id="Browsers_error_tolerance"><br>        <span class="tocnum">3.2.9</span><br>        浏览器的容错机制<br>    </h4><br>    <p>您在浏览 HTML 网页时从来不会看到“语法无效”的错误。这是因为浏览器会纠正任何无效内容，然后继续工作。</p><br>    <p>以下面的 HTML 代码为例：</p><br>    <pre class="prettyprint"><span class="tag">&lt;html&gt;</span><span class="tag">&lt;mytag&gt;</span><span class="tag">&lt;/mytag&gt;</span><span class="tag">&lt;div&gt;</span><span class="tag">&lt;p&gt;</span><span class="tag">&lt;/div&gt;</span><span class="pln">Really lousy HTML</span><span class="tag">&lt;/p&gt;</span><span class="tag">&lt;/html&gt;</span></pre><br>    <p><br>        在这里，我已经违反了很多语法规则（“mytag”不是标准的标记，“p”和“div”元素之间的嵌套有误等等），但是浏览器仍然会正确地显示这些内容，并且毫无怨言。因为有大量的解析器代码会纠正 HTML 网页作者的错误。<br>    </p><br>    <p><br>        不同浏览器的错误处理机制相当一致，但令人称奇的是，这种机制并不是 HTML 当前规范的一部分。和书签管理以及前进/后退按钮一样，它也是浏览器在多年发展中的产物。很多网站都普遍存在着一些已知的无效 HTML 结构，每一种浏览器都会尝试通过和其他浏览器一样的方式来修复这些无效结构。<br>    </p><br>    <p>HTML5 规范定义了一部分这样的要求。Webkit 在 HTML 解析器类的开头注释中对此做了很好的概括。</p><br>    <blockquote><br>        <p>解析器对标记化输入内容进行解析，以构建文档树。如果文档的格式正确，就直接进行解析。</p><br>        <p>遗憾的是，我们不得不处理很多格式错误的 HTML 文档，所以解析器必须具备一定的容错性。</p><br>        <p>我们至少要能够处理以下错误情况：</p><br>        <ol><br>            <li>明显不能在某些外部标记中添加的元素。在此情况下，我们应该关闭所有标记，直到出现禁止添加的元素，然后再加入该元素。</li><br>            <li><br>                我们不能直接添加的元素。这很可能是网页作者忘记添加了其中的一些标记（或者其中的标记是可选的）。这些标签可能包括：HTML HEAD BODY TBODY TR TD LI（还有遗漏的吗？）。<br>            </li><br>            <li>向 inline 元素内添加 block 元素。关闭所有 inline 元素，直到出现下一个较高级的 block 元素。</li><br>            <li>如果这样仍然无效，可关闭所有元素，直到可以添加元素为止，或者忽略该标记。</li><br>        </ol><br>    </blockquote><br>    <p>让我们看一些 Webkit 容错的示例：</p><br>    <h5>使用了 &lt;/br&gt; 而不是 &lt;br&gt;</h5><br>    <p><br>        有些网站使用了 &lt;/br&gt; 而不是 &lt;br&gt;。为了与 IE 和 Firefox 兼容，Webkit 将其与 &lt;br&gt; 做同样的处理。&nbsp;<br>        <br>代码如下：</p><br>    <pre class="prettyprint"><span class="kwd">if</span><span class="pun">(</span><span class="pln">t</span><span class="pun">-&gt;</span><span class="pln">isCloseTag</span><span class="pun">(</span><span class="pln">brTag</span><span class="pun">)</span><span class="pun">&amp;&amp;</span><span class="pln">m_document</span><span class="pun">-&gt;</span><span class="pln">inCompatMode</span><span class="pun">())</span><span class="pun">{</span><span class="pln">reportError</span><span class="pun">(</span><span class="typ">MalformedBRError</span><span class="pun">);</span><span class="pln">t</span><span class="pun">-&gt;</span><span class="pln">beginTag </span><span class="pun">=</span><span class="kwd">true</span><span class="pun">;</span><span class="pun">}</span></pre><br>    请注意，错误处理是在内部进行的，用户并不会看到这个过程。<br>    <p>&nbsp;</p><br>    <h5>离散表格</h5><br>    <p><br>        离散表格是指位于其他表格内容中，但又不在任何一个单元格内的表格。&nbsp;<br>        <br>比如以下的示例：</p><br>    <pre class="prettyprint"><span class="tag">&lt;table&gt;</span><span class="tag">&lt;table&gt;</span><span class="tag">&lt;tr&gt;&lt;td&gt;</span><span class="pln">inner table</span><span class="tag">&lt;/td&gt;&lt;/tr&gt;</span><span class="tag">&lt;/table&gt;</span><span class="tag">&lt;tr&gt;&lt;td&gt;</span><span class="pln">outer table</span><span class="tag">&lt;/td&gt;&lt;/tr&gt;</span><span class="tag">&lt;/table&gt;</span></pre><br>    Webkit 会将其层次结构更改为两个同级表格：<br>    <pre class="prettyprint"><span class="tag">&lt;table&gt;</span><span class="tag">&lt;tr&gt;&lt;td&gt;</span><span class="pln">outer table</span><span class="tag">&lt;/td&gt;&lt;/tr&gt;</span><span class="tag">&lt;/table&gt;</span><span class="tag">&lt;table&gt;</span><span class="tag">&lt;tr&gt;&lt;td&gt;</span><span class="pln">inner table</span><span class="tag">&lt;/td&gt;&lt;/tr&gt;</span><span class="tag">&lt;/table&gt;</span></pre><br>    代码如下：<br>    <pre class="prettyprint"><span class="kwd">if</span><span class="pun">(</span><span class="pln">m_inStrayTableContent </span><span class="pun">&amp;&amp;</span><span class="pln">localName </span><span class="pun">==</span><span class="pln">tableTag</span><span class="pun">)</span><span class="pln">popBlock</span><span class="pun">(</span><span class="pln">tableTag</span><span class="pun">);</span></pre><br>    Webkit 使用一个堆栈来保存当前的元素内容，它会从外部表格的堆栈中弹出内部表格。现在，这两个表格就变成了同级关系。<br>    <p>&nbsp;</p><br>    <h5>嵌套的表单元素</h5><br>    <p><br>        如果用户在一个表单元素中又放入了另一个表单，那么第二个表单将被忽略。&nbsp;<br>        <br>代码如下：</p><br>    <pre class="prettyprint"><span class="kwd">if</span><span class="pun">(!</span><span class="pln">m_currentFormElement</span><span class="pun">)</span><span class="pun">{</span><span class="pln">m_currentFormElement </span><span class="pun">=</span><span class="kwd">new</span><span class="typ">HTMLFormElement</span><span class="pun">(</span><span class="pln">formTag</span><span class="pun">,</span><span class="pln">m_document</span><span class="pun">);</span><span class="pun">}</span></pre><br>    <p>&nbsp;</p><br>    <h5>过于复杂的标记层次结构</h5><br>    <p>代码的注释已经说得很清楚了。&nbsp;</p><br>    <div class="comment"><br>        <blockquote><br>            示例网站 www.liceo.edu.mx 嵌套了约 1500 个标记，全都来自一堆 &lt;b&gt; 标记。我们只允许最多 20 层同类型标记的嵌套，如果再嵌套更多，就会全部忽略。<br>        </blockquote><br>    </div><br>    <pre class="prettyprint"><span class="kwd">bool</span><span class="typ">HTMLParser</span><span class="pun">::</span><span class="pln">allowNestedRedundantTag</span><span class="pun">(</span><span class="kwd">const</span><span class="typ">AtomicString</span><span class="pun">&amp;</span><span class="pln">tagName</span><span class="pun">)</span><span class="pun">{</span><span class="kwd">unsigned</span><span class="pln">i </span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="kwd">for</span><span class="pun">(</span><span class="typ">HTMLStackElem</span><span class="pun"></span><span class="pln">curr </span><span class="pun">=</span><span class="pln">m_blockStack</span><span class="pun">;</span><span class="pln">i </span><span class="pun">&lt;</span><span class="pln">cMaxRedundantTagDepth </span><span class="pun">&amp;&amp;</span><span class="pln">curr </span><span class="pun">&amp;&amp;</span><span class="pln">curr</span><span class="pun">-&gt;</span><span class="pln">tagName </span><span class="pun">==</span><span class="pln">tagName</span><span class="pun">;</span><span class="pln">curr </span><span class="pun">=</span><span class="pln">curr</span><span class="pun">-&gt;</span><span class="kwd">next</span><span class="pun">,</span><span class="pln">i</span><span class="pun">++)</span><span class="pun">{</span><span class="pun">}</span><span class="kwd">return</span><span class="pln">i </span><span class="pun">!=</span><span class="pln">cMaxRedundantTagDepth</span><span class="pun">;</span><span class="pun">}</span></pre><br>    <p>&nbsp;</p><br>    <h5>放错位置的 html 或者 body 结束标记</h5><br>    <p>同样，代码的注释已经说得很清楚了。</p><br>    <blockquote><br>        支持格式非常糟糕的 HTML 代码。我们从不关闭 body 标记，因为一些愚蠢的网页会在实际文档结束之前就关闭。我们通过调用 end() 来执行关闭操作。<br>    </blockquote><br>    <pre class="prettyprint"><span class="kwd">if</span><span class="pun">(</span><span class="pln">t</span><span class="pun">-&gt;</span><span class="pln">tagName </span><span class="pun">==</span><span class="pln">htmlTag </span><span class="pun">||</span><span class="pln">t</span><span class="pun">-&gt;</span><span class="pln">tagName </span><span class="pun">==</span><span class="pln">bodyTag </span><span class="pun">)</span><span class="kwd">return</span><span class="pun">;</span></pre><br>    所以网页作者需要注意，除非您想作为反面教材出现在 Webkit 容错代码段的示例中，否则还请编写格式正确的 HTML 代码。<br>    <p>&nbsp;</p><br>    <p>&nbsp;</p><br>    <h3 id="CSS_parsing"><br>        <span class="tocnum">3.3</span><br>        CSS 解析<br>    </h3><br>    <p><br>        还记得简介中解析的概念吗？和 HTML 不同，CSS 是上下文无关的语法，可以使用简介中描述的各种解析器进行解析。事实上，<br>        <a href="http://www.w3.org/TR/CSS2/grammar.html" target="_blank">CSS 规范定义了 CSS 的词法和语法</a><br>        。<br>    </p><br>    <p><br>        让我们来看一些示例：&nbsp;<br>        <br>词法语法（词汇）是针对各个标记用正则表达式定义的：</p><br>    <pre>comment   \/*[^<em>]</em>*+([^/<em>][^</em>]<em>\</em>+)<em>\/<br>num   [0-9]+|[0-9]</em>“.”[0-9]+<br>nonascii  [\200-\377]<br>nmstart   [_a-z]|{nonascii}|{escape}<br>nmchar    [_a-z0-9-]|{nonascii}|{escape}<br>name    {nmchar}+<br>ident   {nmstart}{nmchar}<em><br></em></pre><br>    <p>“ident”是标识符 (identifier) 的缩写，比如类名。“name”是元素的 ID（通过“#”来引用）。</p><br>    <p>语法是采用 BNF 格式描述的。</p><br>    <pre class="prettyprint lang-css"><span class="kwd">ruleset</span><span class="pun">:</span><span class="pln">selector </span><span class="pun">[</span><span class="str">‘,’</span><span class="pln">S</span><span class="pun"></span><span class="pln">selector </span><span class="pun">]<em></em></span><span class="str">‘{‘</span><span class="pln">S</span><span class="pun"></span><span class="pln">declaration </span><span class="pun">[</span><span class="str">‘;’</span><span class="pln">S</span><span class="pun"><em></em></span><span class="pln">declaration </span><span class="pun">]</span><span class="str">‘}’</span><span class="pln">S</span><span class="pun"><em></em></span><span class="pun">;</span><span class="kwd">selector</span><span class="pun">:</span><span class="pln">simple_selector </span><span class="pun">[</span><span class="pln">combinator selector </span><span class="pun">|</span><span class="pln">S</span><span class="pun">+</span><span class="pun">[</span><span class="pln">combinator</span><span class="pun">?</span><span class="pln">selector </span><span class="pun">]?</span><span class="pun">]?</span><span class="pun">;</span><span class="kwd">simple_selector</span><span class="pun">:</span><span class="pln">element_name </span><span class="pun">[</span><span class="pln">HASH </span><span class="pun">|</span><span class="pln">class </span><span class="pun">|</span><span class="pln">attrib </span><span class="pun">|</span><span class="pln">pseudo </span><span class="pun">]</span><span class="pun">|</span><span class="pun">[</span><span class="pln">HASH </span><span class="pun">|</span><span class="pln">class </span><span class="pun">|</span><span class="pln">attrib </span><span class="pun">|</span><span class="pln">pseudo </span><span class="pun">]+</span><span class="pun">;</span><span class="kwd">class</span><span class="pun">:</span><span class="str">‘.’</span><span class="pln">IDENT</span><span class="pun">;</span><span class="kwd">element_name</span><span class="pun">:</span><span class="pln">IDENT </span><span class="pun">|</span><span class="str">‘<em>‘</em></span><span class="pun">;</span><span class="kwd">attrib</span><span class="pun">:</span><span class="str">‘[‘</span><span class="pln">S</span><span class="pun"></span><span class="pln">IDENT S</span><span class="pun"><em></em></span><span class="pun">[</span><span class="pun">[</span><span class="str">‘=’</span><span class="pun">|</span><span class="pln">INCLUDES </span><span class="pun">|</span><span class="pln">DASHMATCH </span><span class="pun">]</span><span class="pln">S</span><span class="pun"></span><span class="pun">[</span><span class="pln">IDENT </span><span class="pun">|</span><span class="pln">STRING </span><span class="pun">]</span><span class="pln">S</span><span class="pun"><em></em></span><span class="pun">]</span><span class="str">‘]’</span><span class="pun">;</span><span class="kwd">pseudo</span><span class="pun">:</span><span class="str">‘:’</span><span class="pun">[</span><span class="pln">IDENT </span><span class="pun">|</span><span class="pln">FUNCTION S</span><span class="pun"></span><span class="pun">[</span><span class="pln">IDENT S</span><span class="pun"><em>]</em></span><span class="str">‘)’</span><span class="pun">]</span><span class="pun">;</span></pre><br>    解释：这是一个规则集的结构：<br>    <pre class="prettyprint lang-css"><span class="pln">div</span><span class="pun">.</span><span class="pln">error </span><span class="pun">,</span><span class="pln">a</span><span class="pun">.</span><span class="pln">error </span><span class="pun">{</span><span class="kwd">color</span><span class="pun">:</span><span class="pln">red</span><span class="pun">;</span><span class="kwd">font-weight</span><span class="pun">:</span><span class="pln">bold</span><span class="pun">;</span><span class="pun">}</span></pre><br>    div.error 和 a.error 是选择器。大括号内的部分包含了由此规则集应用的规则。此结构的正式定义是这样的：<br>    <pre class="prettyprint lang-css"><span class="kwd">ruleset</span><span class="pun">:</span><span class="pln">selector </span><span class="pun">[</span><span class="str">‘,’</span><span class="pln">S</span><span class="pun"></span><span class="pln">selector </span><span class="pun">]<em></em></span><span class="str">‘{‘</span><span class="pln">S</span><span class="pun"></span><span class="pln">declaration </span><span class="pun">[</span><span class="str">‘;’</span><span class="pln">S</span><span class="pun"><em></em></span><span class="pln">declaration </span><span class="pun">]</span><span class="str">‘}’</span><span class="pln">S</span><span class="pun"><em></em></span><span class="pun">;</span></pre><br>    这表示一个规则集就是一个选择器，或者由逗号和空格（S 表示空格）分隔的多个（数量可选）选择器。规则集包含了大括号，以及其中的一个或多个（数量可选）由分号分隔的声明。“声明”和“选择器”将由下面的 BNF 格式定义。<br>    <p>&nbsp;</p><br>    <h4 id="Webkit_CSS_parser"><br>        <span class="tocnum">3.3.1</span><br>        Webkit CSS 解析器<br>    </h4><br>    <p><br>        Webkit 使用&nbsp;<br>        <a href="#parser_generators">Flex 和 Bison</a><br>        &nbsp;解析器生成器，通过 CSS 语法文件自动创建解析器。正如我们之前在解析器简介中所说，Bison 会创建自下而上的移位归约解析器。Firefox 使用的是人工编写的自上而下的解析器。这两种解析器都会将 CSS 文件解析成 StyleSheet 对象，且每个对象都包含 CSS 规则。CSS 规则对象则包含选择器和声明对象，以及其他与 CSS 语法对应的对象。<br>    </p><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>    <img src="http://pic002.cnblogs.com/images/2012/40481/2012103113243956.png" alt=""><br>    <br><br>    <span data-count="12"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;图<br>    </span><br>    ：解析 CSS<br>    <h3 id="The_order_of_processing_scripts_and_style_sheets"><br>        <span class="tocnum">3.4</span><br>        处理脚本和样式表的顺序<br>    </h3><br>    <h4 id="Scripts"><br>        <span class="tocnum">3.4.1</span><br>        脚本<br>    </h4><br>    <p><br>        网络的模型是同步的。网页作者希望解析器遇到 &lt;script&gt; 标记时立即解析并执行脚本。文档的解析将停止，直到脚本执行完毕。如果脚本是外部的，那么解析过程会停止，直到从网络同步抓取资源完成后再继续。此模型已经使用了多年，也在 HTML4 和 HTML5 规范中进行了指定。作者也可以将脚本标注为“defer”，这样它就不会停止文档解析，而是等到解析结束才执行。HTML5 增加了一个选项，可将脚本标记为异步，以便由其他线程解析和执行。<br>    </p><br>    <h4 id="Speculative_parsing"><br>        <span class="tocnum">3.4.2</span><br>        预解析<br>    </h4><br>    <p><br>        Webkit 和 Firefox 都进行了这项优化。在执行脚本时，其他线程会解析文档的其余部分，找出并加载需要通过网络加载的其他资源。通过这种方式，资源可以在并行连接上加载，从而提高总体速度。请注意，预解析器不会修改 DOM 树，而是将这项工作交由主解析器处理；预解析器只会解析外部资源（例如外部脚本、样式表和图片）的引用。<br>    </p><br>    <h4 id="Style_sheets"><br>        <span class="tocnum">3.4.3</span><br>        样式表<br>    </h4><br>    <p><br>        另一方面，样式表有着不同的模型。理论上来说，应用样式表不会更改 DOM 树，因此似乎没有必要等待样式表并停止文档解析。但这涉及到一个问题，就是脚本在文档解析阶段会请求样式信息。如果当时还没有加载和解析样式，脚本就会获得错误的回复，这样显然会产生很多问题。这看上去是一个非典型案例，但事实上非常普遍。Firefox 在样式表加载和解析的过程中，会禁止所有脚本。而对于 Webkit 而言，仅当脚本尝试访问的样式属性可能受尚未加载的样式表影响时，它才会禁止该脚本。<br>    </p><br>    <h5 class="tocchap">Chapter 4</h5><br>    <h3 id="Render_tree_construction">呈现树构建</h3><br>    <p><br>        在 DOM 树构建的同时，浏览器还会构建另一个树结构：呈现树。这是由可视化元素按照其显示顺序而组成的树，也是文档的可视化表示。它的作用是让您按照正确的顺序绘制内容。<br>    </p><br>    <p><br>        Firefox 将呈现树中的元素称为“框架”。Webkit 使用的术语是呈现器或呈现对象。&nbsp;<br>        <br><br>        呈现器知道如何布局并将自身及其子元素绘制出来。&nbsp;<br>        <br>Webkits RenderObject 类是所有呈现器的基类，其定义如下：</p><br>    <pre class="prettyprint"><span class="kwd">class</span><span class="typ">RenderObject</span><span class="pun">{</span><span class="kwd">virtual</span><span class="kwd">void</span><span class="pln">layout</span><span class="pun">();</span><span class="kwd">virtual</span><span class="kwd">void</span><span class="pln">paint</span><span class="pun">(</span><span class="typ">PaintInfo</span><span class="pun">);</span><span class="kwd">virtual</span><span class="kwd">void</span><span class="pln">rect repaintRect</span><span class="pun">();</span><span class="typ">Node</span><span class="pun"></span><span class="pln">node</span><span class="pun">;</span><span class="com">//the DOM node</span><span class="typ">RenderStyle</span><span class="pun"><em></em></span><span class="pln">style</span><span class="pun">;</span><span class="com">// the computed style</span><span class="typ">RenderLayer</span><span class="pun"></span><span class="pln">containgLayer</span><span class="pun">;</span><span class="com">//the containing z-index layer</span><span class="pun">}</span></pre><br>    <p>&nbsp;</p><br>    <p><br>        每一个呈现器都代表了一个矩形的区域，通常对应于相关节点的 CSS 框，这一点在 CSS2 规范中有所描述。它包含诸如宽度、高度和位置等几何信息。&nbsp;<br>        <br><br>        框的类型会受到与节点相关的“display”样式属性的影响（请参阅<br>        <a href="#style_computation">样式计算</a><br>        章节）。下面这段 Webkit 代码描述了根据 display 属性的不同，针对同一个 DOM 节点应创建什么类型的呈现器。<br>    </p><br>    <pre class="prettyprint"><span class="typ">RenderObject</span><span class="pun"><em></em></span><span class="typ">RenderObject</span><span class="pun">::</span><span class="pln">createObject</span><span class="pun">(</span><span class="typ">Node</span><span class="pun"></span><span class="pln">node</span><span class="pun">,</span><span class="typ">RenderStyle</span><span class="pun"><em></em></span><span class="pln">style</span><span class="pun">)</span><span class="pun">{</span><span class="typ">Document</span><span class="pun"></span><span class="pln">doc </span><span class="pun">=</span><span class="pln">node</span><span class="pun">-&gt;</span><span class="pln">document</span><span class="pun">();</span><span class="typ">RenderArena</span><span class="pun"><em></em></span><span class="pln">arena </span><span class="pun">=</span><span class="pln">doc</span><span class="pun">-&gt;</span><span class="pln">renderArena</span><span class="pun">();</span><span class="pun">…</span><span class="typ">RenderObject</span><span class="pun"></span><span class="pln">o </span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="kwd">switch</span><span class="pun">(</span><span class="pln">style</span><span class="pun">-&gt;</span><span class="pln">display</span><span class="pun">())</span><span class="pun">{</span><span class="kwd">case</span><span class="pln">NONE</span><span class="pun">:</span><span class="kwd">break</span><span class="pun">;</span><span class="kwd">case</span><span class="pln">INLINE</span><span class="pun">:</span><span class="pln">o </span><span class="pun">=</span><span class="kwd">new</span><span class="pun">(</span><span class="pln">arena</span><span class="pun">)</span><span class="typ">RenderInline</span><span class="pun">(</span><span class="pln">node</span><span class="pun">);</span><span class="kwd">break</span><span class="pun">;</span><span class="kwd">case</span><span class="pln">BLOCK</span><span class="pun">:</span><span class="pln">o </span><span class="pun">=</span><span class="kwd">new</span><span class="pun">(</span><span class="pln">arena</span><span class="pun">)</span><span class="typ">RenderBlock</span><span class="pun">(</span><span class="pln">node</span><span class="pun">);</span><span class="kwd">break</span><span class="pun">;</span><span class="kwd">case</span><span class="pln">INLINE_BLOCK</span><span class="pun">:</span><span class="pln">o </span><span class="pun">=</span><span class="kwd">new</span><span class="pun">(</span><span class="pln">arena</span><span class="pun">)</span><span class="typ">RenderBlock</span><span class="pun">(</span><span class="pln">node</span><span class="pun">);</span><span class="kwd">break</span><span class="pun">;</span><span class="kwd">case</span><span class="pln">LIST_ITEM</span><span class="pun">:</span><span class="pln">o </span><span class="pun">=</span><span class="kwd">new</span><span class="pun">(</span><span class="pln">arena</span><span class="pun">)</span><span class="typ">RenderListItem</span><span class="pun">(</span><span class="pln">node</span><span class="pun">);</span><span class="kwd">break</span><span class="pun">;</span><span class="pun">…</span><span class="pun">}</span><span class="kwd">return</span><span class="pln">o</span><span class="pun">;</span><span class="pun">}</span></pre><br>    元素类型也是考虑因素之一，例如表单控件和表格都对应特殊的框架。&nbsp;<br>    <br><br>    在 Webkit 中，如果一个元素需要创建特殊的呈现器，就会替换&nbsp;<br>    <code>createRenderer</code><br>    &nbsp;方法。呈现器所指向的样式对象中包含了一些和几何无关的信息。<br>    <p>&nbsp;</p><br>    <h5 id="The_render_tree_relation_to_the_DOM_tree"><br>        <span class="tocnum">4.1</span><br>        呈现树和 DOM 树的关系<br>    </h5><br>    呈现器是和 DOM 元素相对应的，但并非一一对应。非可视化的 DOM 元素不会插入呈现树中，例如“head”元素。如果元素的 display 属性值为“none”，那么也不会显示在呈现树中（但是 visibility 属性值为“hidden”的元素仍会显示）。<br>    <p>&nbsp;</p><br>    <p><br>        有一些 DOM 元素对应多个可视化对象。它们往往是具有复杂结构的元素，无法用单一的矩形来描述。例如，“select”元素有 3 个呈现器：一个用于显示区域，一个用于下拉列表框，还有一个用于按钮。如果由于宽度不够，文本无法在一行中显示而分为多行，那么新的行也会作为新的呈现器而添加。&nbsp;<br>        <br><br>        另一个关于多呈现器的例子是格式无效的 HTML。根据 CSS 规范，inline 元素只能包含 block 元素或 inline 元素中的一种。如果出现了混合内容，则应创建匿名的 block 呈现器，以包裹 inline 元素。<br>    </p><br>    <p><br>        有一些呈现对象对应于 DOM 节点，但在树中所在的位置与 DOM 节点不同。浮动定位和绝对定位的元素就是这样，它们处于正常的流程之外，放置在树中的其他地方，并映射到真正的框架，而放在原位的是占位框架。<br>    </p><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>    <img src="http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image025.png.pagespeed.ce.3lhNd6H7V4.png" alt="" width="731" height="396"></div><br><div><br>    <span data-count="13"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 图<br>    </span><br>    ：呈现树及其对应的 DOM 树 (<br>    <a href="#3_1">3.1</a><br>    )。初始容器 block 为“viewport”，而在 Webkit 中则为“RenderView”对象。<br>    <h5 id="The_flow_of_constructing_the_tree"><br>        <span class="tocnum">4.2</span><br>        构建呈现树的流程<br>    </h5><br>    <p><br>        在 Firefox 中，系统会针对 DOM 更新注册展示层，作为侦听器。展示层将框架创建工作委托给&nbsp;<br>        <code>FrameConstructor</code><br>        ，由该构造器解析样式（请参阅<br>        <a href="#style">样式计算</a><br>        ）并创建框架。<br>    </p><br>    <p><br>        在 Webkit 中，解析样式和创建呈现器的过程称为“附加”。每个 DOM 节点都有一个“attach”方法。附加是同步进行的，将节点插入 DOM 树需要调用新的节点“attach”方法。<br>    </p><br>    <p><br>        处理 html 和 body 标记就会构建呈现树根节点。这个根节点呈现对象对应于 CSS 规范中所说的容器 block，这是最上层的 block，包含了其他所有 block。它的尺寸就是视口，即浏览器窗口显示区域的尺寸。Firefox 称之为&nbsp;<br>        <code>ViewPortFrame</code><br>        ，而 Webkit 称之为&nbsp;<br>        <code>RenderView</code><br>        。这就是文档所指向的呈现对象。呈现树的其余部分以 DOM 树节点插入的形式来构建。<br>    </p><br>    <p><br>        请参阅<br>        <a href="http://www.w3.org/TR/CSS21/intro.html#processing-model" target="_blank">关于处理模型的 CSS2 规范</a><br>        。<br>    </p><br>    <h4 id="Style_Computation"><br>        <span class="tocnum">4.3</span><br>        样式计算<br>    </h4><br>    <p>构建呈现树时，需要计算每一个呈现对象的可视化属性。这是通过计算每个元素的样式属性来完成的。</p><br>    <p><br>        样式包括来自各种来源的样式表、inline 样式元素和 HTML 中的可视化属性（例如“bgcolor”属性）。其中后者将经过转化以匹配 CSS 样式属性。<br>    </p><br>    <p><br>        样式表的来源包括浏览器的默认样式表、由网页作者提供的样式表以及由浏览器用户提供的用户样式表（浏览器允许您定义自己喜欢的样式。以 Firefox 为例，用户可以将自己喜欢的样式表放在“Firefox Profile”文件夹下）。<br>    </p><br>    <p>样式计算存在以下难点：</p><br>    <ol><br>        <li><br>            <a id="issue1">样式</a><br>            数据是一个超大的结构，存储了无数的样式属性，这可能造成内存问题。<br>        </li><br>        <li><br>            <p><br>                <a id="issue2">如果</a><br>                不进行优化，为每一个元素查找匹配的规则会造成性能问题。要为每一个元素遍历整个规则列表来寻找匹配规则，这是一项浩大的工程。选择器会具有很复杂的结构，这就会导致某个匹配过程一开始看起来很可能是正确的，但最终发现其实是徒劳的，必须尝试其他匹配路径。<br>            </p><br>            <p>例如下面这个组合选择器：</p><br>            <pre class="prettyprint"><span class="pln">div div div div</span><span class="pun">{</span><span class="pun">…</span><span class="pun">}</span></pre><br>            这意味着规则适用于作为 3 个 div 元素的子代的&nbsp;<br>            <code>&lt;div&gt;</code><br>            。如果您要检查规则是否适用于某个指定的&nbsp;<br>            <code>&lt;div&gt;</code><br>            &nbsp;元素，应选择树上的一条向上路径进行检查。您可能需要向上遍历节点树，结果发现只有两个 div，而且规则并不适用。然后，您必须尝试树中的其他路径。<br>        </li><br>        <li><br>            <a id="issue3">应用</a><br>            规则涉及到相当复杂的层叠规则（用于定义这些规则的层次）。<br>        </li><br>    </ol><br>    让我们来看看浏览器是如何处理这些问题的：<br>    <h5 id="Sharing_style_data"><br>        <span class="tocnum">4.3.1</span><br>        共享样式数据<br>    </h5><br>    <p><br>        Webkit 节点会引用样式对象 (RenderStyle)。这些对象在某些情况下可以由不同节点共享。这些节点是同级关系，并且：<br>    </p><br>    <ol><br>        <li>这些元素必须处于相同的鼠标状态（例如，不允许其中一个是“:hover”状态，而另一个不是）</li><br>        <li>任何元素都没有 ID</li><br>        <li>标记名称应匹配</li><br>        <li>类属性应匹配</li><br>        <li>映射属性的集合必须是完全相同的</li><br>        <li>链接状态必须匹配</li><br>        <li>焦点状态必须匹配</li><br>        <li>任何元素都不应受属性选择器的影响，这里所说的“影响”是指在选择器中的任何位置有任何使用了属性选择器的选择器匹配</li><br>        <li>元素中不能有任何 inline 样式属性</li><br>        <li><br>            不能使用任何同级选择器。WebCore 在遇到任何同级选择器时，只会引发一个全局开关，并停用整个文档的样式共享（如果存在）。这包括 + 选择器以及 :first-child 和 :last-child 等选择器。<br>        </li><br>    </ol><br>    <h5 id="Firefox_rule_tree"><br>        <span class="tocnum">4.3.2</span><br>        Firefox 规则树<br>    </h5><br>    <p><br>        为了简化样式计算，Firefox 还采用了另外两种树：规则树和样式上下文树。Webkit 也有样式对象，但它们不是保存在类似样式上下文树这样的树结构中，只是由 DOM 节点指向此类对象的相关样式。<br>    </p><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>    <img src="http://pic002.cnblogs.com/images/2012/40481/2012103113264155.png" alt=""><br>    <br><br>    <span data-count="14">图</span><br>    ：Firefox 样式上下文树 (<br>    <a href="#2_2">2.2</a><br>    )<br>    <p><br>        样式上下文包含端值。要计算出这些值，应按照正确顺序应用所有的匹配规则，并将其从逻辑值转化为具体的值。例如，如果逻辑值是屏幕大小的百分比，则需要换算成绝对的单位。规则树的点子真的很巧妙，它使得节点之间可以共享这些值，以避免重复计算，还可以节约空间。<br>    </p><br>    <p><br>        所有匹配的规则都存储在树中。路径中的底层节点拥有较高的优先级。规则树包含了所有已知规则匹配的路径。规则的存储是延迟进行的。规则树不会在开始的时候就为所有的节点进行计算，而是只有当某个节点样式需要进行计算时，才会向规则树添加计算的路径。<br>    </p><br>    <p>这个想法相当于将规则树路径视为词典中的单词。如果我们已经计算出如下的规则树：</p><br>    <p><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>        <img src="http://pic002.cnblogs.com/images/2012/40481/2012103113274712.png" alt=""><br>        <img title="" src="http://1-ps.googleusercontent.com/h/www.gstatic.com/psa/static/1.gif" alt="" width="400" height="261" align="" border="0"></p><br>    <p><br>        &nbsp; &nbsp; &nbsp; 假设我们需要为内容树中的另一个元素匹配规则，并且找到匹配路径是 B - E - I（按照此顺序）。由于我们在树中已经计算出了路径 A - B - E - I - L，因此就已经有了此路径，这就减少了现在所需的工作量。<br>    </p><br>    <p>&nbsp;</p><br>    <p>让我们看看规则树如何帮助我们减少工作。</p><br>    <h5 id="Division_into_structs">结构划分</h5><br>    <p><br>        样式上下文可分割成多个结构。这些结构体包含了特定类别（如 border 或 color）的样式信息。结构中的属性都是继承的或非继承的。继承属性如果未由元素定义，则继承自其父代。非继承属性（也称为“重置”属性）如果未进行定义，则使用默认值。<br>    </p><br>    <p><br>        规则树通过缓存整个结构（包含计算出的端值）为我们提供帮助。这一想法假定底层节点没有提供结构的定义，则可使用上层节点中的缓存结构。<br>    </p><br>    <h5 id="Computing_the_style_contexts_using_the_rule_tree">使用规则树计算样式上下文</h5><br>    <p><br>        在计算某个特定元素的样式上下文时，我们首先计算规则树中的对应路径，或者使用现有的路径。然后我们沿此路径应用规则，在新的样式上下文中填充结构。我们从路径中拥有最高优先级的底层节点（通常也是最特殊的选择器）开始，并向上遍历规则树，直到结构填充完毕。如果该规则节点对于此结构没有任何规范，那么我们可以实现更好的优化：寻找路径更上层的节点，找到后指定完整的规范并指向相关节点即可。这是最好的优化方法，因为整个结构都能共享。这可以减少端值的计算量并节约内存。&nbsp;<br>        <br>如果我们找到了部分定义，就会向上遍历规则树，直到结构填充完毕。</p><br>    <p><br>        如果我们找不到结构的任何定义，那么假如该结构是“继承”类型，我们会在<br>        <strong>上下文树</strong><br>        中指向父代的结构，这样也可以共享结构。如果是 reset 类型的结构，则会使用默认值。<br>    </p><br>    <p><br>        如果最特殊的节点确实添加了值，那么我们需要另外进行一些计算，以便将这些值转化成实际值。然后我们将结果缓存在树节点中，供子代使用。<br>    </p><br>    <p><br>        如果某个元素与其同级元素都指向同一个树节点，那么它们就可以共享<br>        <strong>整个样式上下文</strong><br>        。<br>    </p><br>    <p>让我们来看一个例子，假设我们有如下 HTML 代码：</p><br>    <pre class="prettyprint"><span class="tag">&lt;html&gt;</span><span class="tag">&lt;body&gt;</span><span class="tag">&lt;div</span><span class="atn">class</span><span class="pun">=</span><span class="atv">“err”</span><span class="atn">id</span><span class="pun">=</span><span class="atv">“div1”</span><span class="tag">&gt;</span><span class="tag">&lt;p&gt;</span><span class="pln">this is a </span><span class="tag">&lt;span</span><span class="atn">class</span><span class="pun">=</span><span class="atv">“big”</span><span class="tag">&gt;</span><span class="pln">big error </span><span class="tag">&lt;/span&gt;</span><span class="pln">this is also a</span><span class="tag">&lt;span</span><span class="atn">class</span><span class="pun">=</span><span class="atv">“big”</span><span class="tag">&gt;</span><span class="pln">very  big  error</span><span class="tag">&lt;/span&gt;</span><span class="pln">error</span><span class="tag">&lt;/p&gt;</span><span class="tag">&lt;/div&gt;</span><span class="tag">&lt;div</span><span class="atn">class</span><span class="pun">=</span><span class="atv">“err”</span><span class="atn">id</span><span class="pun">=</span><span class="atv">“div2”</span><span class="tag">&gt;</span><span class="pln">another error</span><span class="tag">&lt;/div&gt;</span><span class="tag">&lt;/body&gt;</span><span class="tag">&lt;/html&gt;</span></pre><br>    还有如下规则：<br>    <ol class="linenums"><br>        <li class="L0"><br>            <span class="pln">div</span><br>            <span class="pun">{</span><br>            <span class="kwd">margin</span><br>            <span class="pun">:</span><br>            <span class="lit">5px</span><br>            <span class="pun">;</span><br>            <span class="kwd">color</span><br>            <span class="pun">:</span><br>            <span class="pln">black</span><br>            <span class="pun">}</span><br>        </li><br>        <li class="L1"><br>            <span class="pun">.</span><br>            <span class="pln">err</span><br>            <span class="pun">{</span><br>            <span class="kwd">color</span><br>            <span class="pun">:</span><br>            <span class="pln">red</span><br>            <span class="pun">}</span><br>        </li><br>        <li class="L2"><br>            <span class="pun">.</span><br>            <span class="pln">big</span><br>            <span class="pun">{</span><br>            <span class="kwd">margin-top</span><br>            <span class="pun">:</span><br>            <span class="lit">3px</span><br>            <span class="pun">}</span><br>        </li><br>        <li class="L3"><br>            <span class="pln">div span</span><br>            <span class="pun">{</span><br>            <span class="kwd">margin-bottom</span><br>            <span class="pun">:</span><br>            <span class="lit">4px</span><br>            <span class="pun">}</span><br>        </li><br>        <li class="L4"><br>            <span class="pun">#</span><br>            <span class="pln">div1</span><br>            <span class="pun">{</span><br>            <span class="kwd">color</span><br>            <span class="pun">:</span><br>            <span class="pln">blue</span><br>            <span class="pun">}</span><br>        </li><br>        <li class="L5"><br>            <span class="pun">#</span><br>            <span class="pln">div2</span><br>            <span class="pun">{</span><br>            <span class="kwd">color</span><br>            <span class="pun">:</span><br>            <span class="pln">green</span><br>            <span class="pun">}</span><br>        </li><br>    </ol><br>    <p><br>        为了简便起见，我们只需要填充两个结构：color 结构和 margin 结构。color 结构只包含一个成员（即“color”），而 margin 结构包含四条边。&nbsp;<br>        <br>形成的规则树如下图所示（节点的标记方式为“节点名 : 指向的规则序号”）：</p><br>    <p><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>        <img src="http://pic002.cnblogs.com/images/2012/40481/2012103113313363.png" alt=""><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>    </p><br>    <p><br>        <span data-count="15"><br>            &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;图<br>        </span><br>        ：规则树 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;上下文树如下图所示（节点名 : 指向的规则节点）：<br>    </p><br>    <p><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>        <img src="http://pic002.cnblogs.com/images/2012/40481/2012103113362094.png" alt=""></p><br>    <p><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 图：上下文树<br>    </p><br>    <p><br>        假设我们解析 HTML 时遇到了第二个 &lt;div&gt; 标记，我们需要为此节点创建样式上下文，并填充其样式结构。&nbsp;<br>        <br><br>        经过规则匹配，我们发现该 &lt;div&gt; 的匹配规则是第 1、2 和 6 条。这意味着规则树中已有一条路径可供我们的元素使用，我们只需要再为其添加一个节点以匹配第 6 条规则（规则树中的 F 节点）。&nbsp;<br>        <br>我们将创建样式上下文并将其放入上下文树中。新的样式上下文将指向规则树中的 F 节点。</p><br>    <p><br>        现在我们需要填充样式结构。首先要填充的是 margin 结构。由于最后的规则节点 (F) 并没有添加到 margin 结构，我们需要上溯规则树，直至找到在先前节点插入中计算过的缓存结构，然后使用该结构。我们会在指定 margin 规则的最上层节点（即 B 节点）上找到该结构。<br>    </p><br>    <p><br>        我们已经有了 color 结构的定义，因此不能使用缓存的结构。由于 color 有一个属性，我们无需上溯规则树以填充其他属性。我们将计算端值（将字符串转化为 RGB 等）并在此节点上缓存经过计算的结构。<br>    </p><br>    <p><br>        第二个 &lt;span&gt; 元素处理起来更加简单。我们将匹配规则，最终发现它和之前的 span 一样指向规则 G。由于我们找到了指向同一节点的同级，就可以共享整个样式上下文了，只需指向之前 span 的上下文即可。<br>    </p><br>    <p><br>        对于包含了继承自父代的规则的结构，缓存是在上下文树中进行的（事实上 color 属性是继承的，但是 Firefox 将其视为 reset 属性，并缓存到规则树上）。&nbsp;<br>        <br>例如，如果我们在某个段落中添加 font 规则：</p><br>    <pre class="prettyprint"><span class="pln">p </span><span class="pun">{</span><span class="pln">font</span><span class="pun">-</span><span class="pln">family</span><span class="pun">:</span><span class="typ">Verdana</span><span class="pun">;</span><span class="pln">font size</span><span class="pun">:</span><span class="lit">10px</span><span class="pun">;</span><span class="pln">font</span><span class="pun">-</span><span class="pln">weight</span><span class="pun">:</span><span class="pln">bold</span><span class="pun">}</span></pre><br>    那么，该段落元素作为上下文树中的 div 的子代，就会共享与其父代相同的 font 结构（前提是该段落没有指定 font 规则）。<br>    <p>&nbsp;</p><br>    <p><br>        在 Webkit 中没有规则树，因此会对匹配的声明遍历 4 次。首先应用非重要高优先级的属性（由于作为其他属性的依据而应首先应用的属性，例如 display），接着是高优先级重要规则，然后是普通优先级非重要规则，最后是普通优先级重要规则。这意味着多次出现的属性会根据正确的层叠顺序进行解析。最后出现的最终生效。&nbsp;<br>    </p><br>    <p><br>        因此概括来说，共享样式对象（整个对象或者对象中的部分结构）可以解决问题&nbsp;<br>        <a href="#issue1">1</a><br>        &nbsp;和问题&nbsp;<br>        <a href="#issue3">3</a><br>        。Firefox 规则树还有助于按照正确的顺序应用属性。<br>    </p><br>    <h5 id="Manipulating_the_rules_for_an_easy_match"><br>        <span class="tocnum">4.3.3</span><br>        对规则进行处理以简化匹配<br>    </h5><br>    <p>样式规则有一些来源：</p><br>    <ul><br>        <li><br>            外部样式表或样式元素中的 CSS 规则<br>            <pre class="prettyprint"><span class="pln">p </span><span class="pun">{</span><span class="pln">color</span><span class="pun">:</span><span class="pln">blue</span><span class="pun">}</span></pre><br>        </li><br>        <li><br>            inline 样式属性及类似内容<br>            <pre class="prettyprint"><span class="tag">&lt;p</span><span class="atn">style</span><span class="pun">=</span><span class="atv">“</span><span class="kwd">color</span><span class="pun">:</span><span class="pln">blue</span><span class="atv">“</span><span class="tag">/&gt;</span></pre><br>        </li><br>        <li><br>            HTML 可视化属性（映射到相关的样式规则）<br>            <pre class="prettyprint"><span class="tag">&lt;p</span><span class="atn">bgcolor</span><span class="pun">=</span><span class="atv">“blue”</span><span class="tag">/&gt;</span></pre><br>        </li><br>    </ul><br>    <p>后两种很容易和元素进行匹配，因为元素拥有样式属性，而且 HTML 属性可以使用元素作为键值进行映射。</p><br>    <p><br>        我们之前在<br>        <a href="#issue2">第 2 个问题</a><br>        中提到过，CSS 规则匹配可能比较棘手。为了解决这一难题，可以对 CSS 规则进行一些处理，以便访问。<br>    </p><br>    <p><br>        样式表解析完毕后，系统会根据选择器将 CSS 规则添加到某个哈希表中。这些哈希表的选择器各不相同，包括 ID、类名称、标记名称等，还有一种通用哈希表，适合不属于上述类别的规则。如果选择器是 ID，规则就会添加到 ID 表中；如果选择器是类，规则就会添加到类表中，依此类推。&nbsp;<br>        <br><br>        这种处理可以大大简化规则匹配。我们无需查看每一条声明，只要从哈希表中提取元素的相关规则即可。这种优化方法可排除掉 95% 以上规则，因此在匹配过程中根本就不用考虑这些规则了 (<br>        <a href="#4_1">4.1</a><br>        )。<br>    </p><br>    <p>我们以如下的样式规则为例：</p><br>    <pre class="prettyprint"><span class="pln">p</span><span class="pun">.</span><span class="pln">error </span><span class="pun">{</span><span class="pln">color</span><span class="pun">:</span><span class="pln">red</span><span class="pun">}</span><span class="com">#messageDiv {height:50px}</span><span class="pln">div </span><span class="pun">{</span><span class="pln">margin</span><span class="pun">:</span><span class="lit">5px</span><span class="pun">}</span></pre><br>    第一条规则将插入类表，第二条将插入 ID 表，而第三条将插入标记表。&nbsp;<br>    <br><br>    对于下面的 HTML 代码段：<br>    <pre class="prettyprint"><span class="tag">&lt;p</span><span class="atn">class</span><span class="pun">=</span><span class="atv">“error”</span><span class="tag">&gt;</span><span class="pln">an error occurred </span><span class="tag">&lt;/p&gt;</span><span class="tag">&lt;div</span><span class="atn">id</span><span class="pun">=</span><span class="atv">“ messageDiv”</span><span class="tag">&gt;</span><span class="pln">this is a message</span><span class="tag">&lt;/div&gt;</span></pre><br>    <p>&nbsp;</p><br>    <p><br>        我们首先会为 p 元素寻找匹配的规则。类表中有一个“error”键，在下面可以找到“p.error”的规则。div 元素在 ID 表（键为 ID）和标记表中有相关的规则。剩下的工作就是找出哪些根据键提取的规则是真正匹配的了。&nbsp;<br>        <br>例如，如果 div 的对应规则如下：</p><br>    <pre class="prettyprint"><span class="pln">table div </span><span class="pun">{</span><span class="pln">margin</span><span class="pun">:</span><span class="lit">5px</span><span class="pun">}</span></pre><br>    这条规则仍然会从标记表中提取出来，因为键是最右边的选择器，但这条规则并不匹配我们的 div 元素，因为 div 没有 table 祖先。<br>    <p>&nbsp;</p><br>    <p>Webkit 和 Firefox 都进行了这一处理。</p><br>    <h5 id="Applying_the_rules_in_the_correct_cascade_order"><br>        <span class="tocnum">4.3.4</span><br>        以正确的层叠顺序应用规则<br>    </h5><br>    <p><br>        样式对象具有每个可视化属性一一对应的属性（均为 CSS 属性但更为通用）。如果某个属性未由任何匹配规则所定义，那么部分属性就可由父代元素样式对象继承。其他属性具有默认值。<br>    </p><br>    <p>如果定义不止一个，就会出现问题，需要通过层叠顺序来解决。</p><br>    <h5 id="Style_sheet_cascade_order">样式表层叠顺序</h5><br>    某个样式属性的声明可能会出现在多个样式表中，也可能在同一个样式表中出现多次。这意味着应用规则的顺序极为重要。这称为“层叠”顺序。根据 CSS2 规范，层叠的顺序为（优先级从低到高）：<br>    <ol><br>        <li>浏览器声明</li><br>        <li>用户普通声明</li><br>        <li>作者普通声明</li><br>        <li>作者重要声明</li><br>        <li>用户重要声明</li><br>    </ol><br>    <p>&nbsp;</p><br>    <p><br>        浏览器声明是重要程度最低的，而用户只有将该声明标记为“重要”才可以替换网页作者的声明。同样顺序的声明会根据<br>        <a href="#Specificity">特异性</a><br>        进行排序，然后再是其指定顺序。HTML 可视化属性会转换成匹配的 CSS 声明。它们被视为低优先级的网页作者规则。<br>    </p><br>    <h5 id="Specificity">特异性</h5><br>    <p><br>        选择器的特异性由&nbsp;<br>        <a href="http://www.w3.org/TR/CSS2/cascade.html#specificity" target="_blank">CSS2 规范</a><br>        定义如下：<br>    </p><br>    <ul><br>        <li>如果声明来自于“style”属性，而不是带有选择器的规则，则记为 1，否则记为 0 (= a)</li><br>        <li>记为选择器中 ID 属性的个数 (= b)</li><br>        <li>记为选择器中其他属性和伪类的个数 (= c)</li><br>        <li>记为选择器中元素名称和伪元素的个数 (= d)</li><br>    </ul><br>    将四个数字按 a-b-c-d 这样连接起来（位于大数进制的数字系统中），构成特异性。<br>    <p>&nbsp;</p><br>    <p><br>        您使用的进制取决于上述类别中的最高计数。&nbsp;<br>        <br><br>        例如，如果 a=14，您可以使用十六进制。如果 a=17，那么您需要使用十七进制；当然不太可能出现这种情况，除非是存在如下的选择器：html body div div p …（在选择器中出现了 17 个标记，这样的可能性极低）。<br>    </p><br>    <p>一些示例：</p><br>    <pre class="prettyprint"><span class="pun"><em></em></span><span class="pun">{}</span><span class="com">/ a=0 b=0 c=0 d=0 -&gt; specificity = 0,0,0,0 <em>/</em></span><span class="pln">li            </span><span class="pun">{}</span><span class="com">/ a=0 b=0 c=0 d=1 -&gt; specificity = 0,0,0,1 <em>/</em></span><span class="pln">li</span><span class="pun">:</span><span class="pln">first</span><span class="pun">-</span><span class="pln">line </span><span class="pun">{}</span><span class="com">/ a=0 b=0 c=0 d=2 -&gt; specificity = 0,0,0,2 <em>/</em></span><span class="pln">ul li         </span><span class="pun">{}</span><span class="com">/ a=0 b=0 c=0 d=2 -&gt; specificity = 0,0,0,2 <em>/</em></span><span class="pln">ul ol</span><span class="pun">+</span><span class="pln">li      </span><span class="pun">{}</span><span class="com">/ a=0 b=0 c=0 d=3 -&gt; specificity = 0,0,0,3 <em>/</em></span><span class="pln">h1 </span><span class="pun">+</span><span class="pun">[</span><span class="pln">rel</span><span class="pun">=</span><span class="pln">up</span><span class="pun">]{}</span><span class="com">/<em> a=0 b=0 c=1 d=1 -&gt; specificity = 0,0,1,1 </em>/</span><span class="pln">ul ol li</span><span class="pun">.</span><span class="pln">red  </span><span class="pun">{}</span><span class="com">/<em> a=0 b=0 c=1 d=3 -&gt; specificity = 0,0,1,3 </em>/</span><span class="pln">li</span><span class="pun">.</span><span class="pln">red</span><span class="pun">.</span><span class="pln">level  </span><span class="pun">{}</span><span class="com">/<em> a=0 b=0 c=2 d=1 -&gt; specificity = 0,0,2,1 </em>/</span><span class="com">#x34y         {}  /<em> a=0 b=1 c=0 d=0 -&gt; specificity = 0,1,0,0 </em>/</span><span class="pln">style</span><span class="pun">=</span><span class="str">“”</span><span class="com">/<em> a=1 b=0 c=0 d=0 -&gt; specificity = 1,0,0,0 </em>/</span></pre><br>    <p>&nbsp;</p><br>    <h5 id="Sorting_the_rules">规则排序</h5><br>    <p><br>        找到匹配的规则之后，应根据级联顺序将其排序。Webkit 对于较小的列表会使用冒泡排序，而对较大的列表则使用归并排序。对于以下规则，Webkit 通过替换“&gt;”运算符来实现排序：<br>    </p><br>    <pre class="prettyprint"><span class="kwd">static</span><span class="kwd">bool</span><span class="kwd">operator</span><span class="pun">&gt;(</span><span class="typ">CSSRuleData</span><span class="pun">&amp;</span><span class="pln">r1</span><span class="pun">,</span><span class="typ">CSSRuleData</span><span class="pun">&amp;</span><span class="pln">r2</span><span class="pun">)</span><span class="pun">{</span><span class="kwd">int</span><span class="pln">spec1 </span><span class="pun">=</span><span class="pln">r1</span><span class="pun">.</span><span class="pln">selector</span><span class="pun">()-&gt;</span><span class="pln">specificity</span><span class="pun">();</span><span class="kwd">int</span><span class="pln">spec2 </span><span class="pun">=</span><span class="pln">r2</span><span class="pun">.</span><span class="pln">selector</span><span class="pun">()-&gt;</span><span class="pln">specificity</span><span class="pun">();</span><span class="kwd">return</span><span class="pun">(</span><span class="pln">spec1 </span><span class="pun">==</span><span class="pln">spec2</span><span class="pun">)</span><span class="pun">:</span><span class="pln">r1</span><span class="pun">.</span><span class="pln">position</span><span class="pun">()</span><span class="pun">&gt;</span><span class="pln">r2</span><span class="pun">.</span><span class="pln">position</span><span class="pun">()</span><span class="pun">:</span><span class="pln">spec1 </span><span class="pun">&gt;</span><span class="pln">spec2</span><span class="pun">;</span><span class="pun">}</span></pre><br>    <p>&nbsp;</p><br>    <h4 id="Gradual_process"><br>        <span class="tocnum">4.4</span><br>        渐进式处理<br>    </h4><br>    <p><br>        Webkit 使用一个标记来表示是否所有的顶级样式表（包括 @imports）均已加载完毕。如果在附加过程中尚未完全加载样式，则使用占位符，并在文档中进行标注，等样式表加载完毕后再重新计算。<br>    </p><br>    <h5 class="tocchap">Chapter 5</h5><br>    <h3 id="Layout">布局</h3><br>    <p>呈现器在创建完成并添加到呈现树时，并不包含位置和大小信息。计算这些值的过程称为布局或重排。</p><br>    <p><br>        HTML 采用基于流的布局模型，这意味着大多数情况下只要一次遍历就能计算出几何信息。处于流中靠后位置元素通常不会影响靠前位置元素的几何特征，因此布局可以按从左至右、从上至下的顺序遍历文档。但是也有例外情况，比如 HTML 表格的计算就需要不止一次的遍历 (<br>        <a href="#3_5">3.5</a><br>        )。<br>    </p><br>    <p>坐标系是相对于根框架而建立的，使用的是上坐标和左坐标。</p><br>    <p><br>        布局是一个递归的过程。它从根呈现器（对应于 HTML 文档的&nbsp;<br>        <code>&lt;html&gt;</code><br>        &nbsp;元素）开始，然后递归遍历部分或所有的框架层次结构，为每一个需要计算的呈现器计算几何信息。<br>    </p><br>    根呈现器的位置左边是 0,0，其尺寸为视口（也就是浏览器窗口的可见区域）。<br>    <p><br>        所有的呈现器都有一个“laybout”或者“reflow”方法，每一个呈现器都会调用其需要进行布局的子代的 layout 方法。<br>    </p><br>    <h4 id="Dirty_bit_system"><br>        <span class="tocnum">5.1</span><br>        Dirty 位系统<br>    </h4><br>    <p><br>        为避免对所有细小更改都进行整体布局，浏览器采用了一种“dirty 位”系统。如果某个呈现器发生了更改，或者将自身及其子代标注为“dirty”，则需要进行布局。<br>    </p><br>    <p><br>        有两种标记：“dirty”和“children are dirty”。“children are dirty”表示尽管呈现器自身没有变化，但它至少有一个子代需要布局。<br>    </p><br>    <h4 id="Global_and_incremental_layout"><br>        <span class="tocnum">5.2</span><br>        全局布局和增量布局<br>    </h4><br>    <p>全局布局是指触发了整个呈现树范围的布局，触发原因可能包括：</p><br>    <ol><br>        <li>影响所有呈现器的全局样式更改，例如字体大小更改。</li><br>        <li>屏幕大小调整。</li><br>    </ol><br>    <p>&nbsp;</p><br>    <p><br>        布局可以采用增量方式，也就是只对 dirty 呈现器进行布局（这样可能存在需要进行额外布局的弊端）。&nbsp;<br>        <br><br>        当呈现器为 dirty 时，会异步触发增量布局。例如，当来自网络的额外内容添加到 DOM 树之后，新的呈现器附加到了呈现树中。<br>    </p><br>    <p><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>        <img src="http://pic002.cnblogs.com/images/2012/40481/2012103113371860.png" alt=""></p>

<pre><code>&lt;span data-count=&quot;17&quot;&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 图
&lt;/span&gt;
：增量布局 - 只有 dirty 呈现器及其子代进行布局 (
&lt;a href=&quot;#3_6&quot;&gt;3.6&lt;/a&gt;
)。
&lt;h4 id=&quot;Asynchronous_and_Synchronous_layout&quot;&gt;
    &lt;span class=&quot;tocnum&quot;&gt;5.3&lt;/span&gt;
    异步布局和同步布局
&lt;/h4&gt;
增量布局是异步执行的。Firefox 将增量布局的“reflow 命令”加入队列，而调度程序会触发这些命令的批量执行。Webkit 也有用于执行增量布局的计时器：对呈现树进行遍历，并对 dirty 呈现器进行布局。&amp;nbsp;
&lt;br&gt;
请求样式信息（例如“offsetHeight”）的脚本可同步触发增量布局。&amp;nbsp;
&lt;br&gt;
全局布局往往是同步触发的。&amp;nbsp;
&lt;br&gt;
有时，当初始布局完成之后，如果一些属性（如滚动位置）发生变化，布局就会作为回调而触发。
&lt;h4 id=&quot;Optimizations&quot;&gt;
    &lt;span class=&quot;tocnum&quot;&gt;5.4&lt;/span&gt;
    优化
&lt;/h4&gt;
如果布局是由“大小调整”或呈现器的位置（而非大小）改变而触发的，那么可以从缓存中获取呈现器的大小，而无需重新计算。&amp;nbsp;
&lt;br&gt;
在某些情况下，只有一个子树进行了修改，因此无需从根节点开始布局。这适用于在本地进行更改而不影响周围元素的情况，例如在文本字段中插入文本（否则每次键盘输入都将触发从根节点开始的布局）。
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h4 id=&quot;The_layout_process&quot;&gt;
    &lt;span class=&quot;tocnum&quot;&gt;5.5&lt;/span&gt;
    布局处理
&lt;/h4&gt;
&lt;p&gt;布局通常具有以下模式：&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;父呈现器确定自己的宽度。&lt;/li&gt;
    &lt;li&gt;
        父呈现器依次处理子呈现器，并且：
        &lt;ol&gt;
            &lt;li&gt;放置子呈现器（设置 x,y 坐标）。&lt;/li&gt;
            &lt;li&gt;
                如果有必要，调用子呈现器的布局（如果子呈现器是 dirty 的，或者这是全局布局，或出于其他某些原因），这会计算子呈现器的高度。
            &lt;/li&gt;

        &lt;/ol&gt;
    &lt;/li&gt;
    &lt;li&gt;父呈现器根据子呈现器的累加高度以及边距和补白的高度来设置自身高度，此值也可供父呈现器的父呈现器使用。&lt;/li&gt;
    &lt;li&gt;将其 dirty 位设置为 false。&lt;/li&gt;

&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
    Firefox 使用“state”对象 (nsHTMLReflowState) 作为布局的参数（称为“reflow”），这其中包括了父呈现器的宽度。&amp;nbsp;
    &lt;br&gt;
    Firefox 布局的输出为“metrics”对象 (nsHTMLReflowMetrics)，其包含计算得出的呈现器高度。
&lt;/p&gt;
&lt;h4 id=&quot;Width_calculation&quot;&gt;
    &lt;span class=&quot;tocnum&quot;&gt;5.6&lt;/span&gt;
    宽度计算
&lt;/h4&gt;
&lt;p&gt;
    呈现器宽度是根据容器块的宽度、呈现器样式中的“width”属性以及边距和边框计算得出的。&amp;nbsp;
    &lt;br&gt;例如以下 div 的宽度：&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;atn&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;atv&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;30%&lt;/span&gt;&lt;span class=&quot;atv&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
将由 Webkit 计算如下（BenderBox 类，calcWidth 方法）：
&lt;ul&gt;
    &lt;li&gt;
        容器的宽度取容器的 availableWidth 和 0 中的较大值。availableWidth 在本例中相当于 contentWidth，计算公式如下：
        &lt;pre class=&quot;prettyprint&quot;&gt;&lt;span class=&quot;pln&quot;&gt;clientWidth&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;paddingLeft&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;paddingRight&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;/pre&gt;
        clientWidth 和 clientHeight 表示一个对象的内部（除去边框和滚动条）。
    &lt;/li&gt;
    &lt;li&gt;元素的宽度是“width”样式属性。它会根据容器宽度的百分比计算得出一个绝对值。&lt;/li&gt;
    &lt;li&gt;然后加上水平方向的边框和补白。&lt;/li&gt;
&lt;/ul&gt;
现在计算得出的是“preferred width”。然后需要计算最小宽度和最大宽度。&amp;nbsp;
&lt;br&gt;
如果首选宽度大于最大宽度，那么应使用最大宽度。如果首选宽度小于最小宽度（最小的不可破开单位），那么应使用最小宽度。
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;这些值会缓存起来，以用于需要布局而宽度不变的情况。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h4 id=&quot;Line_Breaking&quot;&gt;
    &lt;span class=&quot;tocnum&quot;&gt;5.7&lt;/span&gt;
    换行
&lt;/h4&gt;
&lt;p&gt;如果呈现器在布局过程中需要换行，会立即停止布局，并告知其父代需要换行。父代会创建额外的呈现器，并对其调用布局。&lt;/p&gt;
&lt;h5 class=&quot;tocchap&quot;&gt;Chapter 6&lt;/h5&gt;
&lt;h3 id=&quot;Painting&quot;&gt;绘制&lt;/h3&gt;
&lt;p&gt;
    在绘制阶段，系统会遍历呈现树，并调用呈现器的“paint”方法，将呈现器的内容显示在屏幕上。绘制工作是使用用户界面基础组件完成的。
&lt;/p&gt;
&lt;h4 id=&quot;Global_and_Incremental&quot;&gt;
    &lt;span class=&quot;tocnum&quot;&gt;6.1&lt;/span&gt;
    全局绘制和增量绘制
&lt;/h4&gt;
和布局一样，绘制也分为全局（绘制整个呈现树）和增量两种。在增量绘制中，部分呈现器发生了更改，但是不会影响整个树。更改后的呈现器将其在屏幕上对应的矩形区域设为无效，这导致 OS 将其视为一块“dirty 区域”，并生成“paint”事件。OS 会很巧妙地将多个区域合并成一个。在 Chrome 浏览器中，情况要更复杂一些，因为 Chrome 浏览器的呈现器不在主进程上。Chrome 浏览器会在某种程度上模拟 OS 的行为。展示层会侦听这些事件，并将消息委托给呈现根节点。然后遍历呈现树，直到找到相关的呈现器，该呈现器会重新绘制自己（通常也包括其子代）。
&lt;h4 id=&quot;The_painting_order&quot;&gt;
    &lt;span class=&quot;tocnum&quot;&gt;6.2&lt;/span&gt;
    绘制顺序
&lt;/h4&gt;

&lt;a href=&quot;http://www.w3.org/TR/CSS21/zindex.html&quot; target=&quot;_blank&quot;&gt;CSS2 规范定义了绘制流程的顺序&lt;/a&gt;
。绘制的顺序其实就是元素进入
&lt;a href=&quot;#stackingcontext&quot;&gt;堆栈样式上下文&lt;/a&gt;
的顺序。这些堆栈会从后往前绘制，因此这样的顺序会影响绘制。块呈现器的堆栈顺序如下：
&lt;ol&gt;
    &lt;li&gt;背景颜色&lt;/li&gt;
    &lt;li&gt;背景图片&lt;/li&gt;
    &lt;li&gt;边框&lt;/li&gt;
    &lt;li&gt;子代&lt;/li&gt;
    &lt;li&gt;轮廓&lt;/li&gt;

&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h4 id=&quot;Firefox_display_list&quot;&gt;
    &lt;span class=&quot;tocnum&quot;&gt;6.3&lt;/span&gt;
    Firefox 显示列表
&lt;/h4&gt;
Firefox 遍历整个呈现树，为绘制的矩形建立一个显示列表。列表中按照正确的绘制顺序（先是呈现器的背景，然后是边框等等）包含了与矩形相关的呈现器。这样等到重新绘制的时候，只需遍历一次呈现树，而不用多次遍历（绘制所有背景，然后绘制所有图片，再绘制所有边框等等）。
&lt;p&gt;Firefox 对此过程进行了优化，也就是不添加隐藏的元素，例如被不透明元素完全遮挡住的元素。&lt;/p&gt;
&lt;h4 id=&quot;Webkit_rectangle_storage&quot;&gt;
    &lt;span class=&quot;tocnum&quot;&gt;6.4&lt;/span&gt;
    Webkit 矩形存储
&lt;/h4&gt;
在重新绘制之前，Webkit 会将原来的矩形另存为一张位图，然后只绘制新旧矩形之间的差异部分。&amp;nbsp;
&lt;br&gt;
&lt;h5 class=&quot;tocchap&quot;&gt;Chapter 7&lt;/h5&gt;
&lt;h3 id=&quot;Dynamic_changes&quot;&gt;动态变化&lt;/h3&gt;
在发生变化时，浏览器会尽可能做出最小的响应。因此，元素的颜色改变后，只会对该元素进行重绘。元素的位置改变后，只会对该元素及其子元素（可能还有同级元素）进行布局和重绘。添加 DOM 节点后，会对该节点进行布局和重绘。一些重大变化（例如增大“html”元素的字体）会导致缓存无效，使得整个呈现树都会进行重新布局和绘制。
&lt;h5 class=&quot;tocchap&quot;&gt;Chapter 8&lt;/h5&gt;
&lt;h3 id=&quot;The_rendering_engines_threads&quot;&gt;呈现引擎的线程&lt;/h3&gt;
呈现引擎采用了单线程。几乎所有操作（除了网络操作）都是在单线程中进行的。在 Firefox 和 Safari 中，该线程就是浏览器的主线程。而在 Chrome 浏览器中，该线程是标签进程的主线程。&amp;nbsp;
&lt;br&gt;
网络操作可由多个并行线程执行。并行连接数是有限的（通常为 2 至 6 个，以 Firefox 3 为例是 6 个）。
&lt;h4 id=&quot;Event_loop&quot;&gt;
    &lt;span class=&quot;tocnum&quot;&gt;8.1&lt;/span&gt;
    事件循环
&lt;/h4&gt;
浏览器的主线程是事件循环。它是一个无限循环，永远处于接受处理状态，并等待事件（如布局和绘制事件）发生，并进行处理。这是 Firefox 中关于主事件循环的代码：
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;mExiting&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;NS_ProcessNextEvent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;/pre&gt;
&lt;h5 class=&quot;tocchap&quot;&gt;Chapter 9&lt;/h5&gt;
&lt;h3 id=&quot;css&quot;&gt;CSS2 可视化模型&lt;/h3&gt;
&lt;h4 id=&quot;The_canvas&quot;&gt;
    &lt;span class=&quot;tocnum&quot;&gt;9.1&lt;/span&gt;
    画布
&lt;/h4&gt;
&lt;p&gt;
    根据&amp;nbsp;
    &lt;a href=&quot;http://www.w3.org/TR/CSS21/intro.html#processing-model&quot; target=&quot;_blank&quot;&gt;CSS2 规范&lt;/a&gt;
    ，“画布”这一术语是指“用来呈现格式化结构的空间”，也就是供浏览器绘制内容的区域。画布的空间尺寸大小是无限的，但是浏览器会根据视口的尺寸选择一个初始宽度。
&lt;/p&gt;
&lt;p&gt;
    根据&amp;nbsp;
    &lt;a href=&quot;http://www.w3.org/TR/CSS2/zindex.html&quot; target=&quot;_blank&quot;&gt;www.w3.org/TR/CSS2/zindex.html&lt;/a&gt;
    ，画布如果包含在其他画布内，就是透明的；否则会由浏览器指定一种颜色。
&lt;/p&gt;
&lt;h4 id=&quot;CSS_Box_model&quot;&gt;
    &lt;span class=&quot;tocnum&quot;&gt;9.2&lt;/span&gt;
    CSS 框模型
&lt;/h4&gt;
&lt;p&gt;
    &lt;a href=&quot;http://www.w3.org/TR/CSS2/box.html&quot; target=&quot;_blank&quot;&gt;CSS 框模型&lt;/a&gt;
    描述的是针对文档树中的元素而生成，并根据可视化格式模型进行布局的矩形框。&amp;nbsp;
    &lt;br&gt;每个框都有一个内容区域（例如文本、图片等），还有可选的周围补白、边框和边距区域。&lt;/p&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;
&lt;img src=&quot;http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/509x348wimage046.jpg.pagespeed.ic._yaD8H57Ep.webp&quot; alt=&quot;&quot; width=&quot;509&quot; height=&quot;348&quot;&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;
</code></pre><p></p></div><p></p>
<p><div><br>    <span data-count="18"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 图<br>    </span><br>    ：CSS2 框模型<br>    <p><br>        每一个节点都会生成 0..n 个这样的框。&nbsp;<br>        <br>所有元素都有一个“display”属性，决定了它们所对应生成的框类型。示例：</p><br>    <pre class="prettyprint"><span class="pln">block  </span><span class="pun">-</span><span class="pln">generates a block box</span><span class="pun">.</span><span class="kwd">inline</span><span class="pun">-</span><span class="pln">generates one </span><span class="kwd">or</span><span class="pln">more </span><span class="kwd">inline</span><span class="pln">boxes</span><span class="pun">.</span><span class="pln">none </span><span class="pun">-</span><span class="kwd">no</span><span class="pln">box </span><span class="kwd">is</span><span class="pln">generated</span><span class="pun">.</span></pre><br>    默认值是 inline，但是浏览器样式表设置了其他默认值。例如，“div”元素的 display 属性默认值是 block。&nbsp;<br>    <br><br>    您可以在这里找到默认样式表示例：<br>    <a href="http://www.w3.org/TR/CSS2/sample.html" target="_blank">www.w3.org/TR/CSS2/sample.html</a><br>    <p>&nbsp;</p><br>    <h4 id="Positioning_scheme"><br>        <span class="tocnum">9.3</span><br>        定位方案<br>    </h4><br>    <p>有三种定位方案：</p><br>    <ol><br>        <li><br>            普通：根据对象在文档中的位置进行定位，也就是说对象在呈现树中的位置和它在 DOM 树中的位置相似，并根据其框类型和尺寸进行布局。<br>        </li><br>        <li>浮动：对象先按照普通流进行布局，然后尽可能地向左或向右移动。</li><br>        <li>绝对：对象在呈现树中的位置和它在 DOM 树中的位置不同。</li></ol></div></p>
<pre><code>&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;定位方案是由“position”属性和“loat”属性设置的。&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;如果值是 static 和 relative，就是普通流&lt;/li&gt;
    &lt;li&gt;如果值是 absolute 和 fixed，就是绝对定位&lt;/li&gt;

&lt;/ul&gt;

&lt;br&gt;
static 定位无需定义位置，而是使用默认定位。对于其他方案，网页作者需要指定位置：top、bottom、left、right。
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;框的布局方式是由以下因素决定的：&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;框类型&lt;/li&gt;
    &lt;li&gt;框尺寸&lt;/li&gt;
    &lt;li&gt;定位方案&lt;/li&gt;
    &lt;li&gt;外部信息，例如图片大小和屏幕大小&lt;/li&gt;

&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h4 id=&quot;Box_types&quot;&gt;
    &lt;span class=&quot;tocnum&quot;&gt;9.4&lt;/span&gt;
    框类型
&lt;/h4&gt;
&lt;p&gt;block 框：形成一个 block，在浏览器窗口中拥有其自己的矩形区域。&lt;/p&gt;

&lt;img src=&quot;http://1-ps.googleusercontent.com/h/www.gstatic.com/psa/static/1.gif&quot; alt=&quot;&quot; width=&quot;150&quot; height=&quot;127&quot;&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;
&lt;img src=&quot;http://pic002.cnblogs.com/images/2012/40481/2012103113384085.png&quot; alt=&quot;&quot;&gt;
&lt;br&gt;
&lt;span data-count=&quot;19&quot;&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 图
&lt;/span&gt;
：block 框
&lt;p&gt;inline 框：没有自己的 block，但是位于容器 block 内。&lt;/p&gt;
</code></pre><p></p>
<p><div><br>    <p><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>        <img src="http://pic002.cnblogs.com/images/2012/40481/2012103113391570.png" alt=""></p></div></p>
<p></p>
<p><div><br>    <span data-count="20"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;图<br>    </span><br>    ：inline 框<br>    <p>block 采用的是一个接一个的垂直格式，而 inline 采用的是水平格式。</p><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>    <img src="http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image061.png.pagespeed.ce.lncfVd0-qM.png" alt="" width="350" height="324"></div></p>
<p><div><br>    <span data-count="21"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 图<br>    </span><br>    ：block 和 inline 格式<br>    <p><br>        inline 框放置在行中或“行框”中。这些行至少和最高的框一样高，还可以更高，当框根据“底线”对齐时，这意味着元素的底部需要根据其他框中非底部的位置对齐。如果容器的宽度不够，inline 元素就会分为多行放置。在段落中经常发生这种情况。<br>    </p><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>    <img src="http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image063.png.pagespeed.ce.dx-MWRwbSv.png" alt="" width="400" height="277"></div></p>
<p><div><br>    <span data-count="22"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;图<br>    </span><br>    ：行<br>    <h3 id="Positioning"><br>        <span class="tocnum">9.5</span><br>        定位<br>    </h3><br>    <h4 id="Relative"><br>        <span class="tocnum">9.5.1</span><br>        相对<br>    </h4><br>    <p>相对定位：先按照普通方式定位，然后根据所需偏移量进行移动。</p><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>    <img src="http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image065.png.pagespeed.ce.hNn85ms8VR.png" alt="" width="500" height="261"></div></p>
<p><div><br>    <span data-count="23"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 图<br>    </span><br>    ：相对定位<br>    <h4 id="Floats"><br>        <span class="tocnum">9.5.2</span><br>        浮动<br>    </h4><br>    <p>浮动框会移动到行的左边或右边。有趣的特征在于，其他框会浮动在它的周围。下面这段 HTML 代码：</p><br>    <pre class="prettyprint"><span class="tag">&lt;p&gt;</span><span class="tag">&lt;img</span><span class="atn">style</span><span class="pun">=</span><span class="atv">“</span><span class="kwd">float</span><span class="pun">:</span><span class="pln">right</span><span class="atv">“</span><span class="atn">src</span><span class="pun">=</span><span class="atv">“images/image.gif”</span><span class="atn">width</span><span class="pun">=</span><span class="atv">“100”</span><span class="atn">height</span><span class="pun">=</span><span class="atv">“100”</span><span class="tag">&gt;</span><span class="pln">Lorem ipsum dolor sit amet, consectetuer…</span><span class="tag">&lt;/p&gt;</span></pre><br>    显示效果如下：<br>    <p>&nbsp;</p><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>    <img src="http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image067.png.pagespeed.ce.SRkyPOG7Mt.png" alt="" width="444" height="203"></div></p>
<p><div><br>    <span data-count="24"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 图<br>    </span><br>    ：浮动<br>    <h4 id="Absolute_and_fixed"><br>        <span class="tocnum">9.5.3</span><br>        绝对定位和固定定位<br>    </h4><br>    <p>这种布局是准确定义的，与普通流无关。元素不参与普通流。尺寸是相对于容器而言的。在固定定位中，容器就是可视区域。</p><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>    <img src="http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image069.png.pagespeed.ce.K_Jx9RHe6H.png" alt="" width="500" height="343"></div></p>
<p><div><br>    <span data-count="25"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;图<br>    </span><br>    ：固定定位<br>    <br><br>    请注意，即使在文档滚动时，固定框也不会移动。<br>    <p>&nbsp;</p><br>    <h3 id="Layered_representation"><br>        <span class="tocnum">9.6</span><br>        分层展示<br>    </h3><br>    <p>这是由 z-index CSS 属性指定的。它代表了框的第三个维度，也就是沿“z 轴”方向的位置。</p><br>    <p><br>        这些框分散到多个<br>        <a id="stackingcontext">堆栈</a><br>        （称为堆栈上下文）中。在每一个堆栈中，会首先绘制后面的元素，然后在顶部绘制前面的元素，以便更靠近用户。如果出现重叠，新绘制的元素就会覆盖之前的元素。&nbsp;<br>        <br>堆栈是按照 z-index 属性进行排序的。具有“z-index”属性的框形成了本地堆栈。视口具有外部堆栈。</p><br>    <p>示例：</p><br>    <pre class="prettyprint"><span class="tag">&lt;style</span><span class="atn">type</span><span class="pun">=</span><span class="atv">“text/css”</span><span class="tag">&gt;</span><span class="pln">div </span><span class="pun">{</span><span class="kwd">position</span><span class="pun">:</span><span class="pln">absolute</span><span class="pun">;</span><span class="kwd">left</span><span class="pun">:</span><span class="lit">2in</span><span class="pun">;</span><span class="kwd">top</span><span class="pun">:</span><span class="lit">2in</span><span class="pun">;</span><span class="pun">}</span><span class="tag">&lt;/style&gt;</span><span class="tag">&lt;p&gt;</span><span class="tag">&lt;div</span><span class="atn">style</span><span class="pun">=</span><span class="atv">“</span><span class="kwd">z-index</span><span class="pun">:</span><span class="lit">3</span><span class="pun">;</span><span class="kwd">background-color</span><span class="pun">:</span><span class="pln">red</span><span class="pun">;</span><span class="kwd">width</span><span class="pun">:</span><span class="lit">1in</span><span class="pun">;</span><span class="kwd">height</span><span class="pun">:</span><span class="lit">1in</span><span class="pun">;</span><span class="atv">“</span><span class="tag">&gt;</span><span class="tag">&lt;/div&gt;</span><span class="tag">&lt;div</span><span class="atn">style</span><span class="pun">=</span><span class="atv">“</span><span class="kwd">z-index</span><span class="pun">:</span><span class="lit">1</span><span class="pun">;</span><span class="kwd">background-color</span><span class="pun">:</span><span class="pln">green</span><span class="pun">;</span><span class="kwd">width</span><span class="pun">:</span><span class="lit">2in</span><span class="pun">;</span><span class="kwd">height</span><span class="pun">:</span><span class="lit">2in</span><span class="pun">;</span><span class="atv">“</span><span class="tag">&gt;</span><span class="tag">&lt;/div&gt;</span><span class="tag">&lt;/p&gt;</span></pre><br>    结果如下：<br>    <p>&nbsp;</p><br>    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>    <img src="http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/254x227wimage071.png.pagespeed.ic.L7ebADPhYj.png" alt="" width="254" height="227"></div></p>
<p><div><br>    <span data-count="26"><br>        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 图<br>    </span><br>    ：固定定位<br>    <p><br>        虽然红色 div 在标记中的位置比绿色 div 靠前（按理应该在常规流程中优先绘制），但是 z-index 属性的优先级更高，因此它移动到了根框所保持的堆栈中更靠前的位置。<br>    </p><br>    <h5 class="tocchap">Chapter 10</h5><br>    <h3 id="Resources">参考资料</h3><br>    <div class="autonum"><br>        <ol><br>            <li id="1"><br>                浏览器架构<br>                <ol><br>                    <li id="1_1"><br>                        Grosskurth, Alan.&nbsp;<br>                        <a href="http://grosskurth.ca/papers/browser-refarch.pdf" target="_blank">A Reference Architecture for Web Browsers (pdf)</a><br>                    </li><br>                    <li id="1_2"><br>                        Gupta, Vineet.&nbsp;<br>                        <a href="http://www.vineetgupta.com/2010/11/how-browsers-work-part-1-architecture/" target="_blank">How Browsers Work - Part 1 - Architecture</a><br>                    </li><br>                </ol><br>            </li><br>            <li id="2"><br>                解析<br>                <ol><br>                    <li id="2_1"><br>                        Aho, Sethi, Ullman, Compilers: Principles, Techniques, and Tools（即“Dragon book”）, Addison-Wesley, 1986<br>                    </li><br>                    <li id="2_2"><br>                        Rick Jelliffe.&nbsp;<br>                        <a href="http://broadcast.oreilly.com/2009/05/the-bold-and-the-beautiful-two.html" target="_blank">The Bold and the Beautiful: two new drafts for HTML 5.</a><br>                    </li><br>                </ol><br>            </li><br>            <li id="3"><br>                Firefox<br>                <ol><br>                    <li id="3_1"><br>                        L. David Baron,&nbsp;<br>                        <a href="http://dbaron.org/talks/2008-11-12-faster-html-and-css/slide-6.xhtml" target="_blank"><br>                            Faster HTML and CSS: Layout Engine Internals for Web Developers.<br>                        </a><br>                    </li><br>                    <li id="3_2"><br>                        L. David Baron,&nbsp;<br>                        <a href="http://www.youtube.com/watch?v=a2_6bGNZ7bA" target="_blank"><br>                            Faster HTML and CSS: Layout Engine Internals for Web Developers（Google 技术访谈视频）<br>                        </a><br>                    </li><br>                    <li id="3_3"><br>                        L. David Baron,&nbsp;<br>                        <a href="http://www.mozilla.org/newlayout/doc/layout-2006-07-12/slide-6.xhtml" target="_blank">Mozilla’s Layout Engine</a><br>                    </li><br>                    <li id="3_4"><br>                        L. David Baron,&nbsp;<br>                        <a href="http://www.mozilla.org/newlayout/doc/style-system.html" target="_blank">Mozilla Style System Documentation</a><br>                    </li><br>                    <li id="3_5"><br>                        Chris Waterson,&nbsp;<br>                        <a href="http://www.mozilla.org/newlayout/doc/reflow.html" target="_blank">Notes on HTML Reflow</a><br>                    </li><br>                    <li id="3_6"><br>                        Chris Waterson,&nbsp;<br>                        <a href="http://www.mozilla.org/newlayout/doc/gecko-overview.htm" target="_blank">Gecko Overview</a><br>                    </li><br>                    <li id="3_7"><br>                        Alexander Larsson,&nbsp;<br>                        <a href="https://developer.mozilla.org/en/The_life_of_an_HTML_HTTP_request" target="_blank">The life of an HTML HTTP request</a><br>                    </li><br>                </ol><br>            </li><br>            <li id="4"><br>                Webkit<br>                <ol><br>                    <li id="4_1"><br>                        David Hyatt,&nbsp;<br>                        <a href="http://weblogs.mozillazine.org/hyatt/archives/cat_safari.html" target="_blank">Implementing CSS（第一部分）</a><br>                    </li><br>                    <li id="4_2"><br>                        David Hyatt,&nbsp;<br>                        <a href="http://weblogs.mozillazine.org/hyatt/WebCore/chapter2.html" target="_blank">An Overview of WebCore</a><br>                    </li><br>                    <li id="4_3"><br>                        David Hyatt,&nbsp;<br>                        <a href="http://webkit.org/blog/114/" target="_blank">WebCore Rendering</a><br>                    </li><br>                    <li id="4_5"><br>                        David Hyatt,&nbsp;<br>                        <a href="http://webkit.org/blog/66/the-fouc-problem/" target="_blank">The FOUC Problem</a><br>                    </li><br>                </ol><br>            </li><br>            <li id="5"><br>                W3C 规范<br>                <ol><br>                    <li id="5_1"><br>                        <a href="http://www.w3.org/TR/html4/" target="_blank">HTML 4.01 规范</a><br>                    </li><br>                    <li id="5_2"><br>                        <a href="http://dev.w3.org/html5/spec/Overview.html" target="_blank">W3C HTML5 规范</a><br>                    </li><br>                    <li id="5_3"><br>                        <a href="http://www.w3.org/TR/CSS2/" target="_blank">层叠样式表第 2 级第 1 次修改 (CSS 2.1) 规范</a><br>                    </li><br>                </ol><br>            </li><br>            <li><br>                浏览器构建说明<br>                <ol><br>                    <li><br>                        Firefox.&nbsp;<br>                        <a href="https://developer.mozilla.org/en/Build_Documentation" target="_blank">https://developer.mozilla.org/en/Build_Documentation</a><br>                    </li><br>                    <li><br>                        Webkit.&nbsp;<br>                        <a href="http://webkit.org/building/build.html" target="_blank">http://webkit.org/building/build.html</a><br>                    </li><br>                </ol><br>            </li><br>        </ol><br>    </div><br></div></p>
<p><br>    <img src="http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/static/images/profiles/wtaligarsiel.png.pagespeed.ic.5YF-a4gz3t.jpg" alt="" width="200" height="200" align="left"></p><br><p><br>    <a href="http://taligarsiel.com/" target="_blank">塔利·加希尔</a><br>    是以色列的一名开发人员。她在 2000 年开始从事网络开发工作，逐渐熟悉了 Netscape 的“邪恶”层模型。就像理查德·费曼 (Richard Feynmann) 一样，她极度热衷于探究事物的原理，因此开始深入了解浏览器的内部原理，并记录研究成果。塔利还发表过一篇<br>    <a href="http://taligarsiel.com/ClientSidePerformance.html" target="_blank">关于客户端性能的简短指南</a><br>    。<br></p><br><h4>翻译情况</h4><br><p><br>    此网页已两次翻译为日文！<br>    <a href="http://cou929.nu/docs/how-browsers-work/" target="_blank">浏览器的工作原理：现代网络浏览器幕后揭秘 (ja)</a><br>    ，译者：<br>    <a href="https://twitter.com/#!/_kosei_" target="_blank">@<em>kosei</em></a><br>    ；以及<br>    <a href="http://shanon-tech.blogspot.com/2011/09/web.html" target="_blank">ブラウザってどうやって動いてるの？（モダンWEBブラウザシーンの裏側</a><br>    ，译者：<br>    <a href="https://twitter.com/#!/ikeike443" target="_blank">@ikeike443</a><br>    &nbsp;和&nbsp;<br>    <a href="https://twitter.com/#!/kiyoto01" target="_blank">@kiyoto01</a><br>    。感谢大家！<br></p><br><p><br>    如未另行<br>    <a href="http://code.google.com/policies.html#restrictions" target="_blank" rel="external">说明</a><br>    ，那么此网页的内容已根据<br>    <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank" rel="external">知识共享许可协议 3.0 版</a><br>    获得了许可，且代码示例已根据&nbsp;<br>    <a href="http://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache 许可 2.0 版</a><br>    获得了许可。<br></p><br><p><br>    转自：<br>    <a href="http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html" target="_blank"><br>        http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html<br>    </a><br></p>]]></content>
    
    <summary type="html">
    
      浏览器的工作原理：新式网络浏览器幕后揭秘
    
    </summary>
    
      <category term="Stack" scheme="http://ithans.com/categories/Stack/"/>
    
    
      <category term="Browser" scheme="http://ithans.com/tags/Browser/"/>
    
  </entry>
  
  <entry>
    <title>当你输入一个网址的时候，实际上发生了什么[转]</title>
    <link href="http://ithans.com/2013/what-really-happens-when-you-navigate-to-a-url/"/>
    <id>http://ithans.com/2013/what-really-happens-when-you-navigate-to-a-url/</id>
    <published>2013-02-23T16:00:00.000Z</published>
    <updated>2016-02-20T10:48:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><br>    原文:<br>    <a href="http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/" target="_blank"><br>        http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/<br>    </a><br>    &nbsp;<br>    <br></p><br><p><br>    作为一个软件开发者，你一定会对网络应用如何工作有一个完整的层次化的认知，同样这里也包括这些应用所用到的技术：像浏览器，HTTP，HTML，网络服务器，需求处理等等。<br></p><br><p>本文将更深入的研究当你输入一个网址的时候，后台到底发生了一件件什么样的事～</p><br><h3>1. 首先嘛，你得在浏览器里输入要网址:</h3><br><p><br>    <img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image4.png" alt="image" style="width: 562px; height: 98px; cursor: url(http://res.qqmail.com/zh_CN/htmledition/images/newicon/zbig.cur), auto;" title="image" width="591" border="0" height="103"></p><br><p></p><br><h3>2. 浏览器查找域名的IP地址</h3><br><p><br>    <img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image13.png" alt="image" style="border-width: 0px; display: inline;" title="image" width="228" border="0" height="96"></p><br><p>导航的第一步是通过访问的域名找出其IP地址。DNS查找过程如下：</p><br><div><br>    <ul><br>        <li> <strong>浏览器缓存 –</strong><br>            浏览器会缓存DNS记录一段时间。 有趣的是，操作系统没有告诉浏览器储存DNS记录的时间，这样不同浏览器会储存个自固定的一个时间（2分钟到30分钟不等）。<br>        </li><br>        <li> <strong>系统缓存</strong><br>            – 如果在浏览器缓存里没有找到需要的记录，浏览器会做一个系统调用（windows里是gethostbyname）。这样便可获得系统缓存中的记录。<br>        </li><br>        <li><br>            <strong>路由器缓存</strong><br>            – 接着，前面的查询请求发向路由器，它一般会有自己的DNS缓存。<br>        </li><br>        <li><br>            <strong>ISP DNS 缓存</strong><br>            – 接下来要check的就是ISP缓存DNS的服务器。在这一般都能找到相应的缓存记录。<br>        </li><br>        <li><br>            <strong>递归搜索</strong><br>            –<br>            你的ISP的DNS服务器从跟域名服务器开始进行递归搜索，从.com顶级域名服务器到Facebook的域名服务器。一般DNS服务器的缓存中会有.com域名服务器中的域名，所以到顶级服务器的匹配过程不是那么必要了。<br>        </li><br>    </ul><br></div><br><p>DNS递归查找如下图所示：</p><br><p><br>    <img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/500pxAn_example_of_theoretical_DNS_recursion_svg.png" alt="500px-An_example_of_theoretical_DNS_recursion_svg" style="border-width: 0px; display: inline;" title="500px-An_example_of_theoretical_DNS_recursion_svg" width="500" border="0" height="178"></p><br><div><br>    <p><br>        DNS有一点令人担忧，这就是像wikipedia.org 或者 facebook.com这样的整个域名看上去只是对应一个单独的IP地址。还好，有几种方法可以消除这个瓶颈：<br>    </p><br>    <ul><br>        <li><br>            <a href="http://baike.baidu.com/view/1527368.html" target="_blank"><br>                <strong>循环 DNS</strong><br>            </a><br>            是DNS查找时返回多个IP时的解决方案。举例来说，Facebook.com实际上就对应了四个IP地址。<br>        </li><br>        <li><br>            <a href="http://baike.baidu.com/view/486970.htm" target="_blank"><br>                <strong>负载平衡器</strong><br>            </a><br>            是以一个特定IP地址进行侦听并将网络请求转发到集群服务器上的硬件设备。 一些大型的站点一般都会使用这种昂贵的高性能负载平衡器。<br>        </li><br>        <li><br>            <strong>地理 DNS</strong><br>            根据用户所处的地理位置，通过把域名映射到多个不同的IP地址提高可扩展性。这样不同的服务器不能够更新同步状态，但映射静态内容的话非常好。<br>        </li><br>        <li><br>            <a href="http://baike.baidu.com/view/1398775.htm" target="_blank"><br>                <strong>Anycast</strong><br>            </a><br>            是一个IP地址映射多个物理主机的路由技术。<br>            美中不足，Anycast与TCP协议适应的不是很好，所以很少应用在那些方案中。<br>        </li><br>    </ul><br></div><br><div><br>    <p>大多数DNS服务器使用Anycast来获得高效低延迟的DNS查找。</p>

<pre><code>&lt;p&gt;&lt;/p&gt;
</code></pre><p></p></div><p></p>
<p></p><h3>3. 浏览器给web服务器发送一个HTTP请求</h3><p></p>
<p><br>    <img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image22.png" alt="image" style="border-width: 0px; display: inline; margin-left: 0px; margin-right: 0px;" title="image" width="216" border="0" height="95"></p><br><p>因为像Facebook主页这样的动态页面，打开后在浏览器缓存中很快甚至马上就会过期，毫无疑问他们不能从中读取。</p><br><p>所以，浏览器将把一下请求发送到Facebook所在的服务器：</p><br><pre>GET <a href="http://facebook.com/" target="_blank" rel="external">http://facebook.com/</a> HTTP/1.1<br> Accept: application/x-ms-application, image/jpeg, application/xaml+xml, […]<br> User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; […]<br> Accept-Encoding: gzip, deflate<br> Connection: Keep-Alive<br> Host: facebook.com<br> Cookie: datr=1265876274-[…]; locale=en_US; lsd=WW[…]; c_user=2101[…]</pre><br><p><br>    GET 这个请求定义了要读取的<br>    <strong>URL</strong><br>    ： “<a href="http://facebook.com/”。" target="_blank" rel="external">http://facebook.com/”。</a> 浏览器自身定义 (<br>    <strong>User-Agent</strong><br>    头)， 和它希望接受什么类型的相应 (<br>    <strong>Accept</strong><br>    and<br>    <strong>Accept-Encoding</strong><br>    头).<br>    <strong>Connection</strong><br>    头要求服务器为了后边的请求不要关闭TCP连接。<br></p><br><p><br>    请求中也包含浏览器存储的该域名的<br>    <strong>cookies</strong><br>    。可能你已经知道，在不同页面请求当中，cookies是与跟踪一个网站状态相匹配的键值。这样cookies会存储登录用户名，服务器分配的密码和一些用户设置等。Cookies会以文本文档形式存储在客户机里，每次请求时发送给服务器。<br></p><br><div><br>    <p><br>        用来看原始HTTP请求及其相应的工具很多。作者比较喜欢使用fiddler，当然也有像FireBug这样其他的工具。这些软件在网站优化时会帮上很大忙。<br>    </p><br></div><br>除了获取请求，还有一种是发送请求，它常在提交表单用到。发送请求通过URL传递其参数(e.g.: <a href="http://robozzle.com/puzzle.aspx?id=85)。发送请求在请求正文头之后发送其参数。" target="_blank" rel="external">http://robozzle.com/puzzle.aspx?id=85)。发送请求在请求正文头之后发送其参数。</a><br><br><br><br><br>像“<a href="http://facebook.com/”中的斜杠是至关重要的。这种情况下，浏览器能安全的添加斜杠。而像“http" target="_blank" rel="external">http://facebook.com/”中的斜杠是至关重要的。这种情况下，浏览器能安全的添加斜杠。而像“http</a>: //example.com/folderOrFile”这样的地址，因为浏览器不清楚folderOrFile到底是文件夹还是文件，所以不能自动添加 斜杠。这时，浏览器就不加斜杠直接访问地址，服务器会响应一个重定向，结果造成一次不必要的握手。<br><br><br><br><br><h3>4. facebook服务的永久重定向响应</h3><br><p><br>    <img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image8.png" alt="image" style="border-width: 0px; display: inline;" title="image" width="214" border="0" height="87"></p><br><p>图中所示为Facebook服务器发回给浏览器的响应：</p><br><pre>HTTP/1.1 301 Moved Permanently<br> Cache-Control: private, no-store, no-cache, must-revalidate, post-check=0,<br> pre-check=0<br> Expires: Sat, 01 Jan 2000 00:00:00 GMT<br> Location: <a href="http://www.facebook.com/" target="_blank" rel="external">http://www.facebook.com/</a><br> P3P: CP=”DSP LAW”<br> Pragma: no-cache<br> Set-Cookie: made_write_conn=deleted; expires=Thu, 12-Feb-2009 05:09:50 GMT;<br> path=/; domain=.facebook.com; httponly<br> Content-Type: text/html; charset=utf-8<br> X-Cnection: close<br> Date: Fri, 12 Feb 2010 05:09:51 GMT<br>Content-Length: 0</pre><br><p><br>    服务器给浏览器响应一个301永久重定向响应，这样浏览器就会访问“<a href="http://www.facebook.com/”" target="_blank" rel="external">http://www.facebook.com/”</a> 而非“<a href="http://facebook.com/”。" target="_blank" rel="external">http://facebook.com/”。</a><br></p><br><div><br>    <p>为什么服务器一定要重定向而不是直接发会用户想看的网页内容呢？这个问题有好多有意思的答案。</p>

<pre><code>&lt;p&gt;
    其中一个原因跟
    &lt;strong&gt;搜索引擎排名&lt;/strong&gt;
    有 关。你看，如果一个页面有两个地址，就像http://www.igoro.com/
    和http://igoro.com/，搜索引擎会认为它们是两个网站，结果造成每一个的搜索链接都减少从而降低排名。而搜索引擎知道301永久重定向是 什么意思，这样就会把访问带www的和不带www的地址归到同一个网站排名下。
&lt;/p&gt;

&lt;p&gt;
    还有一个是用不同的地址会造成
    &lt;strong&gt;缓存友好性&lt;/strong&gt;
    变差。当一个页面有好几个名字时，它可能会在缓存里出现好几次。
&lt;/p&gt;
</code></pre><p></p></div><p></p>
<p></p><h3>5. 浏览器跟踪重定向地址</h3><p></p>
<p><br>    <img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image23.png" alt="image" style="border-width: 0px; display: inline;" title="image" width="216" border="0" height="95"></p><br><p>现在，浏览器知道了“<a href="http://www.facebook.com/”才是要访问的正确地址，所以它会发送另一个获取请求：" target="_blank" rel="external">http://www.facebook.com/”才是要访问的正确地址，所以它会发送另一个获取请求：</a></p><br><pre>GET <a href="http://www.facebook.com/" target="_blank" rel="external">http://www.facebook.com/</a> HTTP/1.1<br> Accept: application/x-ms-application, image/jpeg, application/xaml+xml, […]<br> Accept-Language: en-US<br> User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; […]<br> Accept-Encoding: gzip, deflate<br> Connection: Keep-Alive<br> Cookie: lsd=XW[…]; c_user=21[…]; x-referer=[…]<br>Host: www.facebook.com</pre><br><p>头信息以之前请求中的意义相同。</p><br><h3>6. 服务器“处理”请求</h3><br><p><br>    <img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image9.png" alt="image" style="border-width: 0px; display: inline;" title="image" width="93" border="0" height="78"></p><br><p>服务器接收到获取请求，然后处理并返回一个响应。</p><br><p><br>    这表面上看起来是一个顺向的任务，但其实这中间发生了很多有意思的东西- 就像作者博客这样简单的网站，何况像facebook那样访问量大的网站呢！<br></p><br><ul><br>    <li><br>        <strong>Web 服务器软件<br>            <br></strong><br>        web服务器软件（像IIS和阿帕奇）接收到HTTP请求，然后确定执行什么请求处理来处理它。请求处理就是一个能够读懂请求并且能生成HTML来进行响应的程序（像ASP.NET,PHP,RUBY…）。<br>        <p><br>            举 个最简单的例子，需求处理可以以映射网站地址结构的文件层次存储。像<a href="http://example.com/folder1/page1.aspx这个地" target="_blank" rel="external">http://example.com/folder1/page1.aspx这个地</a><br>            址会映射/httpdocs/folder1/page1.aspx这个文件。web服务器软件可以设置成为地址人工的对应请求处理，这样<br>            page1.aspx的发布地址就可以是<a href="http://example.com/folder1/page1。" target="_blank" rel="external">http://example.com/folder1/page1。</a><br>        </p><br>    </li><br>    <li><br>        <strong>请求处理<br>            <br></strong><br>        请求处理阅读请求及它的参数和cookies。它会读取也可能更新一些数据，并讲数据存储在服务器上。然后，需求处理会生成一个HTML响应。<br>    </li><br></ul><br><div><br>    <p><br>        所 有动态网站都面临一个有意思的难点 -如何存储数据。小网站一半都会有一个SQL数据库来存储数据，存储大量数据和/或访问量大的网站不得不找一些办法把数据库分配到多台机器上。解决方案 有：sharding<br>    （基于主键值讲数据表分散到多个数据库中），复制，利用弱语义一致性的简化数据库。<br>    </p><br></div><br><div><br>    <p><br>        委 托工作给批处理是一个廉价保持数据更新的技术。举例来讲，Fackbook得及时更新新闻feed，但数据支持下的“你可能认识的人”功能只需要每晚更新<br>    （作者猜测是这样的，改功能如何完善不得而知）。批处理作业更新会导致一些不太重要的数据陈旧，但能使数据更新耕作更快更简洁。<br>    </p><br></div><br><h3>7. 服务器发回一个HTML响应</h3><br><p><br>    <img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image10.png" alt="image" style="border-width: 0px; display: inline;" title="image" width="214" border="0" height="87"></p><br><p>图中为服务器生成并返回的响应：</p><br><pre>HTTP/1.1 200 OK<br> Cache-Control: private, no-store, no-cache, must-revalidate, post-check=0,<br> pre-check=0<br> Expires: Sat, 01 Jan 2000 00:00:00 GMT<br> P3P: CP=”DSP LAW”<br> Pragma: no-cache<br> Content-Encoding: gzip<br> Content-Type: text/html; charset=utf-8<br> X-Cnection: close<br> Transfer-Encoding: chunked<br> Date: Fri, 12 Feb 2010 09:05:55 GMT<br> <br>2b3Tn@[…]</pre><br><p>整个响应大小为35kB，其中大部分在整理后以blob类型传输。</p><br><p><br>    <strong>内容编码</strong><br>    头告诉浏览器整个响应体用gzip算法进行压缩。解压blob块后，你可以看到如下期望的HTML：<br></p><br><pre>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”    <br> “<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&amp;gt" target="_blank" rel="external">http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&amp;gt</a>;<br> &lt;html xmlns=”<a href="http://www.w3.org/1999/xhtml" target="_blank" rel="external">http://www.w3.org/1999/xhtml</a>“ xml:lang=”en”<br> lang=”en” id=”facebook” class=” no_js”&gt;<br> &lt;head&gt;<br> &lt;meta http-equiv=”Content-type” content=”text/html; charset=utf-8” /&gt;<br> &lt;meta http-equiv=”Content-language” content=”en” /&gt;<br>…</pre><br><p><br>    关于压缩，头信息说明了是否缓存这个页面，如果缓存的话如何去做，有什么cookies要去设置（前面这个响应里没有这点）和隐私信息等等。<br></p><br><div><br>    <p><br>        请注意报头中把<br>        <strong>Content-type</strong><br>        设置为“<br>        <strong>text/html</strong><br>        ”。报头让浏览器将该响应内容以HTML形式呈现，而不是以文件形式下载它。浏览器会根据报头信息决定如何解释该响应，不过同时也会考虑像URL扩展内容等其他因素。<br>    </p><br></div><br><h3>8. 浏览器开始显示HTML</h3><br><p>在浏览器没有完整接受全部HTML文档时，它就已经开始显示这个页面了：</p><br><p><br>    <img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image6.png" alt="image" style="border-width: 0px; display: inline;" title="image" width="244" border="0" height="137"></p><br><h3><br>    9.<br>    浏览器发送获取嵌入在HTML中的对象<br></h3><br><p><br>    <img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image11.png" alt="image" style="border-width: 0px; display: inline;" title="image" width="214" border="0" height="126"></p><br><p>在浏览器显示HTML时，它会注意到需要获取其他地址内容的标签。这时，浏览器会发送一个获取请求来重新获得这些文件。</p><br><p>下面是几个我们访问facebook.com时需要重获取的几个URL：</p><br><ul><br>    <li><br>        <strong><br>            图片<br>            <br></strong><br>        <a href="http://static.ak.fbcdn.net/rsrc.php/z12E0/hash/8q2anwu7.gif" target="_blank" rel="external">http://static.ak.fbcdn.net/rsrc.php/z12E0/hash/8q2anwu7.gif</a><br>        <br><br>        <a href="http://static.ak.fbcdn.net/rsrc.php/zBS5C/hash/7hwy7at6.gif" target="_blank" rel="external">http://static.ak.fbcdn.net/rsrc.php/zBS5C/hash/7hwy7at6.gif</a><br>        <br>…</li><br>    <li><br>        <strong><br>            CSS 式样表<br>            <br></strong><br>        <a href="http://static.ak.fbcdn.net/rsrc.php/z448Z/hash/2plh8s4n.css" target="_blank" rel="external">http://static.ak.fbcdn.net/rsrc.php/z448Z/hash/2plh8s4n.css</a><br>        <br><br>        <a href="http://static.ak.fbcdn.net/rsrc.php/zANE1/hash/cvtutcee.css" target="_blank" rel="external">http://static.ak.fbcdn.net/rsrc.php/zANE1/hash/cvtutcee.css</a><br>        <br>…</li><br>    <li><br>        <strong>JavaScript 文件</strong><br>        <br><br>        <a href="http://static.ak.fbcdn.net/rsrc.php/zEMOA/hash/c8yzb6ub.js" target="_blank" rel="external">http://static.ak.fbcdn.net/rsrc.php/zEMOA/hash/c8yzb6ub.js</a><br>        <br><br>        <a href="http://static.ak.fbcdn.net/rsrc.php/z6R9L/hash/cq2lgbs8.js" target="_blank" rel="external">http://static.ak.fbcdn.net/rsrc.php/z6R9L/hash/cq2lgbs8.js</a><br>        <br>…</li><br></ul><br><p>这些地址都要经历一个和HTML读取类似的过程。所以浏览器会在DNS中查找这些域名，发送请求，重定向等等…</p><br><p><br>    但<br>    不像动态页面那样，静态文件会允许浏览器对其进行缓存。有的文件可能会不需要与服务器通讯，而从缓存中直接读取。服务器的响应中包含了静态文件保存的期限<br>    信息，所以浏览器知道要把它们缓存多长时间。还有，每个响应都可能包含像版本号一样工作的ETag头（被请求变量的实体值），如果浏览器观察到文件的版本 ETag信息已经存在，就马上停止这个文件的传输。<br></p><br><div><br>    <p><br>        试着猜猜看“<br>        <strong>fbcdn.net</strong><br>        ”在地址中代表什么？聪明的答案是”Facebook内容分发网络”。Facebook利用内容分发网络（CDN）分发像图片，CSS表和JavaScript文件这些静态文件。所以，这些文件会在全球很多CDN的数据中心中留下备份。<br>    </p>

<pre><code>&lt;p&gt;
    静态内容往往代表站点的带宽大小，也能通过CDN轻松的复制。通常网站会使用第三方的CDN。例如，Facebook的静态文件由最大的CDN提供商Akamai来托管。
&lt;/p&gt;

&lt;p&gt;
    举例来讲，当你试着ping
    static.ak.fbcdn.net的时候，可能会从某个akamai.net服务器上获得响应。有意思的是，当你同样再ping一次的时候，响应的服务器可能就不一样，这说明幕后的负载平衡开始起作用了。
&lt;/p&gt;
</code></pre><p></p></div><p></p>
<p></p><h3>10. 浏览器发送异步（AJAX）请求</h3><p></p>
<p><br>    <img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image12.png" alt="image" style="border-width: 0px; display: inline;" title="image" width="214" border="0" height="120"></p><br><p>在Web 2.0伟大精神的指引下，页面显示完成后客户端仍与服务器端保持着联系。</p><br><p><br>    以<br>    Facebook聊天功能为例，它会持续与服务器保持联系来及时更新你那些亮亮灰灰的好友状态。为了更新这些头像亮着的好友状态，在浏览器中执行的<br>    JavaScript代码会给服务器发送异步请求。这个异步请求发送给特定的地址，它是一个按照程式构造的获取或发送请求。还是在Facebook这个例<br>    子中，客户端发送给<a href="http://www.facebook.com/ajax/chat/buddy_list.php一个发布请求来获取你好友里哪个" target="_blank" rel="external">http://www.facebook.com/ajax/chat/buddy_list.php一个发布请求来获取你好友里哪个</a> 在线的状态信息。<br></p><br><p><br>    提起这个模式，就必须要讲讲”AJAX”–<br>    “异步JavaScript 和 XML”，虽然服务器为什么用XML格式来进行响应也没有个一清二白的原因。再举个例子吧，对于异步请求，Facebook会返回一些JavaScript的代码片段。<br></p><br><div><br>    <p><br>        除了其他，fiddler这个工具能够让你看到浏览器发送的异步请求。事实上，你不仅可以被动的做为这些请求的看客，还能主动出击修改和重新发送它们。AJAX请求这么容易被蒙，可着实让那些计分的在线游戏开发者们郁闷的了。（当然，可别那样骗人家~）<br>    </p><br></div><br><div><br>    <p><br>        Facebook聊天功能提供了关于AJAX一个有意思的问题案例：把数据从服务器端推送到客户端。因为HTTP是一个请求-响应协议，所以聊天服务器不能把新消息发给客户。取而代之的是客户端不得不隔几秒就轮询下服务器端看自己有没有新消息。<br>    </p>

<pre><code>&lt;p&gt;
    这些情况发生时长轮询是个减轻服务器负载挺有趣的技术。如果当被轮询时服务器没有新消息，它就不理这个客户端。而当尚未超时的情况下收到了该客户的新消息，服务器就会找到未完成的请求，把新消息做为响应返回给客户端。
&lt;/p&gt;
</code></pre><p></p></div><p></p>
<p></p><h3>总结一下</h3><p></p>
<p>希望看了本文，你能明白不同的网络模块是如何协同工作的</p>

<p>[转自]：</p>
<p><a href="http://www.cnblogs.com/wenanry/archive/2010/02/25/1673368.html" target="_blank">http://www.cnblogs.com/wenanry/archive/2010/02/25/1673368.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;    原文:&lt;br&gt;    &lt;a href=&quot;http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/&quot; target=&quot;_blank&quot;&gt;&lt;br&gt;        http://
    
    </summary>
    
      <category term="Stack" scheme="http://ithans.com/categories/Stack/"/>
    
    
      <category term="Browser" scheme="http://ithans.com/tags/Browser/"/>
    
      <category term="IIS" scheme="http://ithans.com/tags/IIS/"/>
    
  </entry>
  
</feed>
